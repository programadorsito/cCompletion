import sublime
import sublime_plugin
import sys
import webbrowser

class sublimeC(sublime_plugin.EventListener):
	def on_query_completions(self, view, prefix, locations):
		if view.scope_name(0).find("source.c++")!=-1 or view.scope_name(0).find("source.c ")!=-1:
			funciones="""
			abort@void abort(${1: void })
			abs@int abs(${1: int j })
			atexit@int atexit(${1: register void (${2:*func})(${3:void}) })
			atof@double atof(${1: const char* ptr })
			atoh@unsigned atoh(${1: const char* ptr })
			atoi@int atoi(${1: const char* ptr })
			atol@long atol(${1: const char* ptr })
			tatoll@int64 t atoll(${1: const char* ptr })
			bsearch@void *bsearch(${1: const void *key},${2:const void *base},${3:size t num},${4:size t width},${5:int (${6:*compar})(${7: const void *pkey},${8:const void *pbase}) })
			calloc@void* calloc (${1: size t n},${2:size t size })
			clearenv@int clearenv(${1: void })
			daemon@int daemon(${1: int nochdir},${2:int noclose })
			tdiv@div t div(${1: int numer},${2:int denom })
			drand48@double drand48(${1: void })
			erand48@double erand48(${1: unsigned short int xsubi[3] })
			exit@void exit(${1: int status })
			exit@void exit(${1: int status })
			free@void free(${1: void* ptr })
			getenv@char* getenv(${1: const char* name })
			getsubopt@int getsubopt(${1: char** optionp},${2:char* const* tokens},${3:char** valuep })
			initstate@char* initstate(${1: unsigned int seed},${2:char* state},${3:size t size })
			itoa@char* itoa(${1: int value},${2:char* buffer},${3:int radix })
			jrand48@long jrand48(${1: unsigned short xsubi[3] })
			labs@long labs(${1: long j })
			lcong48@void lcong48(${1: unsigned short int param[7] })
			tldiv@ldiv t ldiv(${1: long int numer},${2:long int denom })
			lrand48@long lrand48(${1: void })
			ltoa@char* ltoa(${1: long value},${2:char* buffer},${3:int radix })
			lltoa@char* lltoa(${1: int64 t value},${2:char* buffer},${3:int radix })
			malloc@void* malloc(${1: size t size })
			mblen@int mblen(${1: const char * s},${2:size t n })
			tmbstowcs@size t mbstowcs(${1: wchar t * pwcs},${2:const char * s},${3:size t n })
			mbtowc@int mbtowc(${1: wchar t * pwc},${2:const char * s},${3:size t n })
			mkstemp@int mkstemp(${1: char* template })
			mktemp@char* mktemp(${1: char* template })
			mrand48@long mrand48(${1: void })
			nrand48@long nrand48(${1: unsigned short xsubi[3] })
			posixmemalign@int posix memalign(${1: void ** memptr},${2:size t alignment},${3:size t size })
			putenv@int putenv(${1: const char *env name })
			qsort@void qsort(${1: void* base},${2:size t num},${3:size t width},${4:int (${5:*compare}) (${6:const void* },${7:const void* }) })
			rand@int rand(${1: void })
			randr@int rand r(${1: unsigned int* seed })
			random@long random(${1: void })
			realloc@void* realloc(${1: void* old blk},${2:size t size })
			realpath@char * realpath(${1: const char * pathname},${2:char * resolved name })
			searchenv@void searchenv(${1: const char* name},${2:const char* env var},${3:char* buffer })
			shortintseed48@unsigned short int *seed48(${1:unsigned short int seed16v[3] })
			setenv@int setenv(${1: const char* name},${2:const char* value},${3:int overwrite })
			setkey@void setkey(${1: const char * key })
			setstate@char *setstate(${1: const char *state })
			srand@void srand(${1: unsigned int seed })
			srand48@void srand48(${1: long seed })
			srandom@void srandom(${1: unsigned int seed })
			strtod@double strtod(${1: const char *ptr},${2:char **endptr })
			intstrtol@long int strtol(${1: const char * ptr},${2:char ** endptr},${3:int base })
			tstrtoll@int64 t strtoll(${1: const char * ptr},${2:char ** endptr},${3:int base })
			longintstrtoul@unsigned long int strtoul(${1: const char * ptr},${2:char ** endptr},${3:int base })
			tstrtoull@uint64 t strtoull(${1: const char * ptr},${2:char ** endptr},${3:int base })
			system@int system(${1: const char *command })
			ultoa@char* ultoa(${1: unsigned long int value},${2:char* buffer},${3:int radix })
			ulltoa@char* ulltoa(${1: uint64 t valuechar* buffer},${2:int radix })
			unsetenv@void unsetenv(${1: const char* name })
			utoa@char* utoa(${1: unsigned int value},${2:char* buffer},${3:int radix })
			wcstol@long wcstol(${1: const wchar t * ptr},${2:wchar t ** endptr},${3:int base })
			longwcstoll@long long wcstoll(${1: const wchar t * ptr},${2:wchar t ** endptr},${3:int base })
			twcstombs@size t wcstombs(${1: char* s},${2:const wchar t* pwcs},${3:size t n })
			wcstoul@long wcstoul(${1: const wchar t * ptr},${2:wchar t ** endptr},${3:int base })
			longwcstoull@long long wcstoull(${1: const wchar t * ptr},${2:char** endptr},${3:int base })
			wctomb@int wctomb(${1: char * s},${2:wchar t wc })
			accept@int accept(${1: int s},${2:struct sockaddr * addr},${3:socklen t * addrlen })
			bind@int bind(${1: int s},${2:const struct sockaddr * name},${3:socklen t namelen })
			connect@int connect(${1: int s},${2:const struct sockaddr * name},${3:socklen t namelen })
			getpeername@int getpeername(${1: int s},${2:struct sockaddr * name},${3:socklen t * namelen })
			getsockname@int getsockname(${1: int s},${2:struct sockaddr * name},${3:socklen t * namelen })
			getsockopt@int getsockopt(${1: int s},${2:int level},${3:int optname},${4:void * optval},${5:socklen t * optlen })
			listen@int listen(${1: int s},${2:int backlog })
			nbaconnect@int nbaconnect(${1: int s},${2:const struct sockaddr * name},${3:size t namelen })
			nbaconnectresult@int nbaconnect result(${1: int fd},${2:int * error })
			Raccept@int Raccept(${1: int s},${2:struct sockaddr * addr},${3:int * addrlen })
			Rbind@int Rbind(${1: int s},${2:const struct sockaddr * name},${3:int namelen })
			Rconnect@int Rconnect(${1: int s},${2:const struct sockaddr * name},${3:int namelen})
			trecv@ssize t recv(${1: int s},${2:void * buf},${3:size t len},${4:int flags })
			trecvfrom@ssize t recvfrom(${1: int s},${2:void * buff},${3:size t len},${4:int flags},${5:struct sockaddr * from},${6:socklen t * fromlen })
			trecvmsg@ssize t recvmsg(${1: int s},${2:struct msghdr * msg},${3:int flags })
			Rgetsockname@int Rgetsockname(${1: int s},${2:struct sockaddr * name},${3:int * namelen })
			Rlisten@int Rlisten(${1: int s},${2:int backlog })
			tsend@ssize t send(${1: int s},${2:const void * msg},${3:size t len},${4:int flags })
			tsendmsg@ssize t sendmsg(${1: int s},${2:const struct msghdr * msg},${3:int flags })
			tsendto@ssize t sendto(${1: int s},${2:const void * msg},${3:size t len},${4:int flags},${5:const struct sockaddr * to},${6:socklen t tolen })
			setsockopt@int setsockopt(${1: int s},${2:int level},${3:int optname},${4:const void * optval},${5:socklen t optlen })
			shutdown@int shutdown(${1: int s},${2:int how })
			sockatmark@int sockatmark(${1: int s })
			socket@int socket(${1: int domain},${2:int type},${3:int protocol })
			socketpair@int socketpair(${1: int domain},${2:int type},${3:int protocol},${4:int * fd[2] })
			access@int access(${1: const char * path},${2:int amode })
			intalarm@unsigned int alarm(${1: unsigned int seconds })
			brk@int brk(${1: void* endds })
			chdir@int chdir(${1: const char* path })
			chown@int chown(${1: const char * path},${2:uid t owner},${3:gid t group })
			chroot@int chroot(${1: const char *path })
			chsize@int chsize(${1: int filedes},${2:long size })
			close@int close(${1: int filedes })
			tconfstr@size t confstr(${1: int name},${2:char * buf},${3:size t len })
			crypt@char * crypt(${1: const char * key},${2:const char * salt })
			intdelay@unsigned int delay(${1: unsigned int duration })
			dup@int dup(${1: int filedes })
			dup2@int dup2(${1: int filedes},${2:int filedes2 })
			eaccess@int eaccess(${1: const char * path},${2:int amode })
			encrypt@void encrypt(${1: char block[64]},${2:int flag })
			@extern char ** environ
			eof@int eof(${1: int filedes })
			fchown@int fchown(${1: int fd},${2:uid t owner},${3:gid t group })
			fdatasync@int fdatasync(${1: int filedes })
			flink@int flink(${1: int fd},${2:const char *path })
			fpathconf@long fpathconf(${1: int filedes},${2:int name })
			fsync@int fsync(${1: int filedes })
			ftruncate@int ftruncate(${1: int fildes},${2:off t length })
			ftruncate64@int ftruncate64(${1: int fildes},${2:off64 t length })
			getcwd@char* getcwd(${1: char* buffer},${2:size t size })
			getdomainname@int getdomainname(${1: char * name},${2:size t namelen })
			getdtablesize@int getdtablesize(${1: void })
			tgetegid@gid t getegid(${1: void })
			tgeteuid@uid t geteuid(${1: void })
			tgetgid@gid t getgid(${1: void })
			getgrouplist@int getgrouplist(${1: const char *name},${2:gid t basegid},${3:gid t *groups},${4:int *ngroups })
			getgroups@int getgroups(${1: int gidsetsize},${2:gid t grouplist[] })
			gethostname@int gethostname(${1: char * name},${2:size t namelen })
			getlogin@char* getlogin(${1: void }) 
			getloginr@int getlogin r(${1: char* name},${2:size t namesize })
			getopt@int getopt(${1: int argc},${2:char * const argv[]},${3:const char * optstring })
			@extern char * optarg
			@extern int optind},${1: opterr},${2: optopt
			getpass@char *getpass(${1: const char *prompt })
			tgetpgid@pid t getpgid(${1: pid t pid })
			tgetsid@pid t getsid(${1: pid t pid })
			tgetuid@uid t getuid(${1: void })
			getwd@char* getwd(${1: char *path name })
			isatty@int isatty(${1: int fildes })
			lchown@int lchown(${1: const char * path},${2:uid t owner},${3:gid t group })
			link@int link(${1: const char* existing},${2:const char* new })
			lockf@int lockf(${1: int filedes},${2:int function},${3:off t size })
			tlseek@off t lseek(${1: int filedes},${2:off t offset},${3:int whence })
			tlseek64@off64 t lseek64(${1: int filedes},${2:off64 t offset},${3:int whence })
			tltrunc@off t ltrunc(${1: int fildes},${2:off t offset},${3:int whence })
			nice@int nice(${1: int incr })
			openfd@int openfd(${1: int fd},${2:int oflag })
			pathconf@long pathconf(${1: const char* path},${2:int name })
			pause@int pause(${1: void })
			pipe@int pipe(${1: int fildes[2] })
			tpread@ssize t pread(${1:int filedes},${2:void *buff},${3:size t nbytes},${4:off t offset })
			tpread64@ssize t pread64(${1: int filedes},${2:void *buff},${3:size t nbytes},${4:off64 t offset })
			tpwrite@ssize t pwrite(${1: int filedes},${2:const void* buff},${3:size t nbytes},${4:off t offset })
			tpwrite64@ssize t pwrite64(${1: int filedes},${2:const void* buff},${3:size t nbytes},${4:off64 t offset })
			qnxcrypt@char* qnx crypt(${1: const char* key},${2:const char* salt })
			rcmd@int rcmd(${1: char ** ahost},${2:unsigned short inport},${3:const char * locuser},${4:const char * remuser},${5:const char * cmd},${6:int * fd2p })
			tread@ssize t read(${1: int fildes},${2:void* buf},${3:size t nbyte })
			readblock@int readblock(${1: int fd},${2:size t blksize},${3:unsigned block},${4:int numblks},${5:void *buff })
			readcond@int readcond(${1: int fd},${2:void * buf},${3:int n},${4:int min},${5:int time},${6:int timeout })
			readlink@int readlink(${1: const char* path},${2:char* buf},${3:size t bufsiz })
			rmdir@int rmdir(${1: const char* path })
			rresvport@int rresvport(${1: int * port })
			ruserok@int ruserok(${1: char * rhost},${2:int superuser},${3:char * ruser},${4:char * luser })
			sbrk@void* sbrk(${1: int increment })
			setdomainname@int setdomainname(${1: const char * name},${2:size t namelen })
			setegid@int setegid(${1: gid t gid })
			seteuid@int seteuid(${1: uid t uid })
			setgid@int setgid(${1: gid t gid })
			setgroups@int setgroups(${1: int ngroups},${2:const gid t *gidset })
			sethostname@int sethostname(${1: const char * name},${2:size t namelen })
			SETIOV@void SETIOV(${1: iov t *msg},${2:void *addr},${3:size t len })
			tsetpgrp@pid t setpgrp(${1: void })
			setregid@int setregid(${1: gid t rgid},${2:gid t egid })
			setreuid@int setreuid(${1: uit t ruid},${2:uid t euid })
			tsetsid@pid t setsid(${1: void })
			setuid@int setuid(${1: uid t uid })
			intsleep@unsigned int sleep(${1: unsigned int seconds })
			sopenfd@int sopenfd(${1: int fd},${2:int oflag},${3:int sflag })
			swab@void swab(${1: const void * src},${2:void * dest},${3:ssize t nbytes })
			symlink@int symlink(${1: const char* pname},${2:const char* slink })
			sync@void sync(${1: void })
			ttcgetpgrp@pid t tcgetpgrp(${1: int fildes })
			tcgetsid@int tcgetsid(${1: int filedes })
			tcsetpgrp@int tcsetpgrp(${1: int fildes},${2:pid t pgrp id })
			ttell@off t tell(${1: int filedes })
			ttell@off64 t tell(${1: int filedes })
			truncate@int truncate(${1: const char* path},${2:off t length })
			ttyname@char *ttyname(${1: int fildes })
			ttynamer@int ttyname r(${1: int fildes},${2:char* name},${3:size t namesize })
			tualarm@useconds t ualarm(${1: useconds t usec},${2:useconds t interval })
			unlink@int unlink(${1: const char * path })
			usleep@int usleep(${1: useconds t useconds })
			twrite@ssize t write(${1: int fildes},${2:const void* buf},${3:size t nbyte })
			writeblock@int writeblock(${1: int fd},${2:size t blksize},${3:unsigned block},${4:int numblks},${5:const void *buff })
			acos@double acos(${1: double x })
			acosf@float acosf(${1: float x })
			acosh@double acosh(${1: double x })
			acoshf@float acoshf(${1: float x })
			asin@double asin(${1: double x })
			asinf@float asinf(${1: float x })
			asinh@double asinh(${1: double x })
			asinhf@float asinhf(${1: float x })
			atan@double atan(${1: double x })
			atanf@float atanf(${1: float x })
			atan2@double atan2(${1: double y},${2:double x })
			atan2f@float atan2f(${1: float y},${2:float x })
			atanh@double atanh(${1: double x })
			atanhf@float atanhf(${1: float x })
			cabsargs@struct cabsargs {double x /* real part */
			@double y /* imaginary part */
			@}
			cabs@double cabs(${1: struct cabsargs value })
			cabsfargs@struct cabsfargs {float x /* real part */
			@float y /* imaginary part */
			@}
			cabsf@float cabsf(${1: struct cabsfargs value })
			cbrt@double cbrt (${1: double x })
			cbrtf@float cbrtf (${1: float x })
			ceil@double ceil(${1: double x })
			ceilf@float ceilf(${1: float x })
			copysign@double copysign (${1: double x},${2:double y})
			copysignf@float copysignf (${1: float x},${2:float y })
			cos@double cos(${1: double x })
			cosf@float cosf(${1: float x })
			cosh@double cosh(${1: double x })
			coshf@float coshf(${1: float x })
			drem@double drem (${1: double x},${2:double y })
			dremf@float dremf (${1: float x},${2:float y })
			erf@double erf (${1: double x })
			erff@float erff (${1: float x })
			erfc@double erfc (${1: double x })
			erfcf@float erfcf (${1: float x })
			exp@double exp(${1: double x })
			expf@float expf(${1: float x })
			expm1@double expm1 (${1: double x })
			expm1f@float expm1f (${1: float x })
			fabs@double fabs(${1: double x })
			fabsf@float fabsf(${1: float x })
			finite@int finite (${1: double x })
			finitef@int finitef (${1: float x})
			floor@double floor(${1: double x })
			floorf@float floorf(${1: float x })
			fmod@double fmod(${1: double x},${2:double y })
			fmodf@float fmodf(${1: float x},${2:float y })
			frexp@double frexp(${1: double value},${2:int* exp })
			frexpf@float frexpf(${1: float value},${2:int* exp })
			gamma@double gamma(${1: double x })
			gammar@double gamma r(${1: double x},${2:int* signgam})
			gammaf@float gammaf(${1: float x })
			gammafr@float gammaf r(${1: float x},${2:int* signgam})
			hypot@double hypot(${1: double x},${2:double y })
			hypotf@float hypotf(${1: float x},${2:float y })
			ilogb@int ilogb (${1: double x })
			ilogbf@int ilogbf (${1:float x })
			isinf@int isinf (${1: double x })
			isinff@int isinff (${1: float x })
			isnan@int isnan (${1: double x })
			isnanf@int isnanf (${1: float x })
			j0@double j0(${1: double x })
			j0f@float j0f(${1: float x })
			j1@double j1(${1: double x })
			j1f@float j1f(${1: float x })
			jn@double jn(${1: int n},${2: double x })
			jnf@float jnf(${1: int n},${2: float x })
			ldexp@double ldexp(${1: double x},${2:int exp })
			ldexp@float ldexp(${1: float x},${2:int exp })
			lgamma@double lgamma(${1: double x })
			lgammar@double lgamma r(${1: double x},${2:int* signgamp})
			lgammaf@float lgammaf(${1: float x })
			lgammafr@float lgammaf r(${1: float x},${2:int* signgamp})
			log@double log(${1: double x })
			logf@float logf(${1: float x })
			log1p@double log1p (${1: double x })
			log1pf@float log1pf (${1: float x })
			log10@double log10(${1: double x })
			log10f@float log10f(${1: float x })
			logb@double logb (${1: double x })
			logbf@float logbf (${1: float x })
			modf@double modf(${1: double value},${2:double* iptr })
			modff@float modff(${1: float value},${2:float* iptr })
			nextafter@double nextafter (${1: double x},${2:double y})
			nextafterf@float nextafterf (${1: float x},${2:float y })
			pow@double pow(${1: double x},${2:double y })
			powf@float powf(${1: float x},${2:float y })
			remainder@double remainder(${1: double x},${2:double y })
			remainderf@float remainderf(${1: float x},${2:float y })
			rint@double rint (${1: double x })
			rintf@float rintf (${1: float x })
			scalb@double scalb(${1: double x},${2:double n })
			scalbf@float scalbf(${1: float x},${2:float n })
			scalbn@double scalbn (${1: double x},${2:int n })
			scalbnf@float scalbnf (${1: float x},${2:int n })
			significand@double significand (${1: double x })
			significandf@float significandf (${1: float x })
			sin@double sin(${1: double x })
			sinf@float sinf(${1: float x })
			sinh@double sinh(${1: double x })
			sinhf@float sinhf(${1: float x })
			sqrt@double sqrt(${1: double x })
			sqrtf@float sqrtf(${1: float x })
			tan@double tan(${1: double x })
			tanf@float tanf(${1: float x })
			tanh@double tanh(${1: double x })
			tanhf@float tanhf(${1: float x })
			y0@double y0(${1: double x })
			y0f@float y0f(${1: float x })
			y1@double y1(${1: double x })
			y1f@float y1f(${1: float x })
			yn@double yn(${1: int n},${2:double x })
			ynf@float ynf(${1: int n},${2:float x })
			addrinfo@struct addrinfo {int ai flags
			@int ai family
			@int ai socktype
			@int ai protocol
			@size t ai addrlen
			@char * ai canonname
			@struct sockaddr * ai addr
			@struct addrinfo * ai next}
			@char ** argv
			@auxv t * auxv
			ioconnect@struct io connect {uint16 t type
			@uint16 t subtype
			@uint32 t file type
			@uint16 t reply max
			@uint16 t entry max
			@uint32 t key
			@uint32 t handle
			@uint32 t ioflag
			@uint32 t mode
			@uint16 t sflag
			@uint16 t access
			@uint16 t zero
			@uint16 t path len
			@uint8 t eflag
			@uint8 t extra type
			@uint16 t extra len
			@char path[1]
			@}
			ioconnectftypereply@struct io connect ftype reply {uint16 t status
			@uint16 t reserved
			@uint32 t file type
			@}
			ioconnectlinkreply@struct io connect link reply {uint32 t reserved1
			@uint32 t file type
			@uint8 t eflag
			@uint8 t reserved2[1]
			@uint16 t chroot len
			@uint32 t umask
			@uint16 t nentries
			@uint16 t path len
			@/*struct io connect entry server[nentries]
			@char path[path len]
			@orstruct server info info
			@io ? t msg
			@*/}
			main@int main(${1: void })
			main@int main(${1: int argc},${2:const char *argv[] })
			main@int main(${1: int argc},${2:const char *argv[]},${3:char *envp[] })
			msginfo@struct msg info { /* msg info server info */uint32 t nd /* client server */
			@uint32 t srcnd /* server n/a */
			@pid t pid /* client server */
			@int32 t tid /* thread n/a */
			@int32 t chid /* server server */
			@int32 t scoid /* server server */
			@int32 t coid /* client client */
			@int32 t msglen /* msg n/a */
			@int32 t srcmsglen /* thread n/a */
			@int32 t dstmsglen /* thread n/a */
			@int16 t priority /* thread n/a */
			@int16 t flags /* n/a client */
			@uint32 t reserved
			@}
			resmgrhandletune@int resmgr handle tune(${1:int min handles},${2:int min clients},${3:int max client handles},${4:int *min handles old},${5:int *min clients old},${6:int *max client handles old})
			Rrcmd@int Rrcmd(${1: char ** ahost},${2:int inport},${3:const char * locuser},${4:const char * remuser},${5:const char * cmd},${6:int * fd2p })
			Rselect@int Rselect(${1: int width},${2:fd set * readfds},${3:fd set * writefds},${4:fd set * exceptionfds},${5:struct timeval * timeout })
			termios@struct termios {tcflag t c iflag
			@tcflag t c oflag
			@tcflag t c cflag
			@tcflag t c lflag
			@cc t c cc[NCCS]
			@uint32 t reserved[3]
			@speed t c ispeed
			@speed t c ospeed
			@}
			utmp@struct utmp {char ut user[UT NAMESIZE]
			@#define ut name ut userchar ut id[4]
			@char ut line[UT LINESIZE]
			@pid t ut pid
			@short ut type
			exitstatus@struct exit status {short e termination
			@short e exit
			@} ut exit
			@short ut spare
			@time t ut time
			@}
			aiocancel@int aio cancel(${1: int fd},${2:struct aiocb * aiocbptr })
			aioerror@int aio error(${1: const struct aiocb * aiocbptr })
			aiofsync@int aio fsync(${1: int op},${2:struct aiocb * aiocbptr })
			aioread@int aio read(${1: struct aiocb * aiocbptr })
			taioreturn@ssize t aio return(${1: struct aiocb * aiocbptr })
			aiosuspend@int aio suspend(${1: const struct aiocb * const list[]},${2:int nent},${3:const struct timespec * timeout })
			aiowrite@int aio write(${1: struct aiocb * aiocbptr })
			liolistio@int lio listio(${1: int mode},${2:struct aiocb* const list[]},${3:int nent},${4:struct sigevent* sig })
			alloca@void* alloca(${1: size t size })
			direct@struct direct {unsigned long d fileno
			@unsigned short d reclen
			@unsigned short d namlen
			@char d name[1]
			@}
			alphasort@int alphasort(${1: struct direct **d1},${2:struct direct **d2})
			scandir@int scandir(${1: char * dirname},${2:struct direct * (${3:* namelist[]})},${4:int (${5:*select})(${6:struct dirent *})},${7:int (${8:*compar})(${9:const void *},${10:const void *}) })
			asctime@char* asctime(${1: const struct tm* timeptr })
			asctimer@char* asctime r(${1: const struct tm* timeptr},${2:char* buf })
			tclock@clock t clock(${1: void })
			intclockgetcpuclockid@extern int clock getcpuclockid(${1:pid t pid},${2:clockid t* clock id })
			clockgetres@int clock getres(${1: clockid t clock id},${2:struct timespec * res })
			clockgettime@int clock gettime(${1: clockid t clock id},${2:struct timespec * tp })
			clocknanosleep@int clock nanosleep(${1: clockid t clock id},${2:int flags},${3:const struct timespec * rqtp},${4:struct timespec * rmtp })
			clocksettime@int clock settime(${1: clockid t clock id},${2:const struct timespec * tp })
			ctime@char* ctime(${1: const time t* timer })
			ctimer@char* ctime r(${1: const time t* timer},${2:char* buf })
			@unsigned int daylight
			difftime@double difftime(${1: time t time1},${2:time t time0 })
			tmgmtime@struct tm* gmtime(${1: const time t* timer })
			tmgmtimer@struct tm* gmtime r(${1: const time t* timer},${2:struct tm* result })
			tmlocaltime@struct tm *localtime(${1: const time t *timer })
			tmlocaltimer@struct tm* localtime r(${1: const time t* timer},${2:struct tm* result })
			tmktime@time t mktime(${1: struct tm* timeptr })
			tmqtimedreceive@ssize t mq timedreceive(${1:mqd t mqdes},${2:char * msg ptr},${3:size t msg len},${4:unsigned int * msg prio},${5:const struct timespec * abs timeout })
			mqtimedsend@int mq timedsend(${1: mqd t mqdes},${2:const char * msg ptr},${3:size t msg len},${4:unsigned int msg prio},${5:const struct timespec * abs timeout })
			nanosleep@int nanosleep(${1: const struct timespec* rqtp},${2:struct timespec* rmtp })
			nanospin@int nanospin(${1: const struct timespec *when })
			nanospincalibrate@int nanospin calibrate(${1: int disable })
			nanospincount@void nanospin count(${1: unsigned long count })
			nanospinns@int nanospin ns(${1: unsigned long nsec })
			longnanospinnstocount@unsigned long nanospin ns to count(${1:unsigned long nsec })
			nsec2timespec@void nsec2timespec(${1: struct timespec *timespec p},${2:uint64 nsec })
			pthreadcondtimedwait@int pthread cond timedwait(${1:pthread cond t* cond},${2:pthread mutex t* mutex},${3:const struct timespec* abstime })
			pthreadmutextimedlock@int pthread mutex timedlock(${1:pthread mutex t * mutex},${2:const struct timespec * abs timeout })
			pthreadrwlocktimedrdlock@int pthread rwlock timedrdlock(${1:pthread rwlock t * rwlock},${2:const struct timespec * abs timeout })
			pthreadrwlocktimedwrlock@int pthread rwlock timedwrlock(${1:pthread rwlock t * rwlock},${2:const struct timespec * abs timeout })
			semtimedwait@int sem timedwait(${1:sem t * sem},${2:const struct timespec * abs timeout })
			tstrftime@size t strftime(${1: char * s},${2:size t maxsize},${3:const char * format},${4:const struct tm * timeptr })
			ttime@time t time(${1: time t * tloc })
			timercreate@int timer create(${1: clockid t clock id},${2:struct sigevent * evp},${3:timer t * timerid })
			timerdelete@int timer delete(${1: timer t timerid })
			timergetexpstatus@int timer getexpstatus(${1: timer t timerid })
			timergetoverrun@int timer getoverrun(${1: timer t timerid })
			timergettime@int timer gettime(${1: timer t timerid},${2:struct itimerspec *value })
			timersettime@int timer settime(${1: timer t timerid},${2:int flags},${3:struct itimerspec * value},${4:struct itimerspec * ovalue })
			inttimertimeout@extern int timer timeout(${1:clockid t id},${2:int flags},${3:const struct sigevent* notify},${4:const struct timespec* ntime},${5:struct timespec* otime })
			inttimertimeoutr@extern int timer timeout r(${1:clockid t id},${2:int flags},${3:const struct sigevent* notify},${4:const struct timespec* ntime},${5:struct timespec* otime })
			timespec@struct timespec {time t tv sec
			@long tv nsec
			timespec2nsec@uint64 timespec2nsec(${1: const struct timespec* ts })
			@long int timezone
			tm@struct tm {int tm sec
			@int tm min
			@int tm hour
			@int tm mday
			@int tm mon
			@int tm year
			@int tm wday
			@int tm yday
			@int tm isdst
			@long int tm gmtoff
			@const char * tm zone
			@}
			@char *tzname[]
			tzset@void tzset(${1: void })
			assert@void assert(${1: int expression })
			@int asyncmsg channel create
			@(${1:unsigned flags},${2: mode t mode},${3: size t buffer size},${4:unsigned max num buffer},${5: const struct sigevent *evint (${6:*recvbuf callback}) (${7:size t bufsize},${8: unsigned num bufs},${9:void *bufs[]},${10: int flags})})
			@int asyncmsg connect attach
			@(${1:uint32 t nd},${2: pid t pid},${3: int chid},${4:unsigned index},${5: unsigned flags},${6:const struct asyncmsg connection attr *attr})
			@int asyncmsg connect attr
			@(${1:int coid},${2: struct asyncmsg connection attr *old attr},${3:const struct asyncmsg connection attr *new attr})
			ChannelCreate@int ChannelCreate(${1: unsigned flags })
			ChannelCreater@int ChannelCreate r(${1: unsigned flags })
			ChannelDestroy@int ChannelDestroy(${1: int chid })
			ChannelDestroyr@int ChannelDestroy r(${1: int chid })
			ClockAdjust@int ClockAdjust(${1: clockid t id},${2:const struct clockadjust * new},${3:struct clockadjust * old })
			ClockAdjustr@int ClockAdjust r(${1: clockid t id},${2:const struct clockadjust * new},${3:struct clockadjust * old })
			ClockPeriod@int ClockPeriod(${1: clockid t id},${2:const struct clockperiod * new},${3:struct clockperiod * old},${4:int reserved })
			ClockPeriodr@int ClockPeriod r(${1: clockid t id},${2:const struct clockperiod * new},${3:struct clockperiod * old},${4:int reserved })
			ClockTime@int ClockTime(${1: clockid t id},${2:const uint64 t * new},${3:uint64 t * old })
			ClockTimer@int ClockTime r(${1: clockid t id},${2:const uint64 t * new},${3:uint64 t * old })
			ConnectAttach@int ConnectAttach(${1: uint32 t nd},${2:pid t pid},${3:int chid},${4:unsigned index},${5:int flags })
			ConnectAttachr@int ConnectAttach r(${1: uint32 t nd},${2:pid t pid},${3:int chid},${4:unsigned index},${5:int flags })
			ConnectClientInfo@int ConnectClientInfo(${1: int scoid},${2:struct client info * infoint ngroups })
			ConnectClientInfor@int ConnectClientInfo r(${1: int scoid},${2:struct client info * infoint ngroups })
			ConnectDetach@int ConnectDetach(${1: int coid })
			ConnectDetachr@int ConnectDetach r(${1: int coid })
			ConnectFlags@int ConnectFlags(${1: pid t pid},${2:int coid},${3:unsigned mask},${4:unsigned bits })
			ConnectFlagsr@int ConnectFlags r(${1: pid t pid},${2:int coid},${3:unsigned mask},${4:unsigned bits })
			ConnectServerInfo@int ConnectServerInfo(${1: pid t pid},${2:int coid},${3:struct server info* info })
			ConnectServerInfor@int ConnectServerInfo r(${1: pid t pid},${2:int coid},${3:struct server info* info })
			DebugBreak@void DebugBreak(${1: void })
			DebugKDBreak@void DebugKDBreak(${1: void })
			DebugKDOutput@void DebugKDOutput(${1: const char* str},${2:size t size })
			InterruptAttach@int InterruptAttach(${1: int intr},${2:const struct sigevent * (${3:* handler})(${4:void *},${5: int})},${6:const void * area},${7:int size},${8:unsigned flags })
			InterruptAttachr@int InterruptAttach r(${1: int intr},${2:const struct sigevent * (${3:* handler})(${4:void *},${5: int})},${6:const void * area},${7:int size},${8:unsigned flags })
			InterruptAttachEvent@int InterruptAttachEvent(${1:int intr},${2:const struct sigevent* event},${3:unsigned flags })
			InterruptAttachEventr@int InterruptAttachEvent r(${1:int intr},${2:const struct sigevent* event},${3:unsigned flags })
			InterruptDetach@int InterruptDetach(${1: int id })
			InterruptDetachr@int InterruptDetach r(${1: int id })
			InterruptDisable@void InterruptDisable(${1: void })
			InterruptEnable@void InterruptEnable(${1: void })
			InterruptHookIdle@int InterruptHookIdle(${1:void (${2:*handler})(${3:uint64 t *},${4: struct qtime entry *})},${5:unsigned flags })
			InterruptHookTrace@int InterruptHookTrace(${1:const struct sigevent * (${2:* handler})(${3:int})},${4:unsigned flags })
			InterruptLock@void InterruptLock(${1: intrspin t* spinlock })
			InterruptMask@int InterruptMask(${1: int intr},${2:int id })
			InterruptUnlock@void InterruptUnlock(${1: intrspin t* spinlock })
			InterruptUnmask@int InterruptUnmask(${1: int intr},${2:int id })
			InterruptWait@int InterruptWait(${1: int flags},${2:const uint64 t * timeout })
			InterruptWaitr@int InterruptWait r(${1: int flags},${2:const uint64 t * timeout })
			MsgDeliverEvent@int MsgDeliverEvent(${1: int rcvid},${2:const struct sigevent* event })
			MsgDeliverEventr@int MsgDeliverEvent r(${1:int rcvid},${2:const struct sigevent* event })
			MsgError@int MsgError(${1: int rcvid},${2:int error })
			MsgErrorr@int MsgError r(${1: int rcvid},${2:int error })
			MsgInfo@int MsgInfo(${1: int rcvid},${2:struct msg info* info })
			MsgInfor@int MsgInfo r(${1: int rcvid},${2:struct msg info* info })
			MsgKeyData@int MsgKeyData(${1: int rcvid},${2:int op},${3:uint32 t key},${4:uint32 t * key2},${5:const iov t * msg},${6:int parts })
			MsgKeyDatar@int MsgKeyData r(${1: int rcvid},${2:int op},${3:uint32 t key},${4:uint32 t * key2},${5:const iov t * msg},${6:int parts })
			MsgRead@int MsgRead(${1: int rcvid},${2:void* msg},${3:int bytes},${4:int offset })
			MsgReadr@int MsgRead r(${1: int rcvid},${2:void* msg},${3:int bytes},${4:int offset })
			MsgReadv@int MsgReadv(${1: int rcvid},${2:const iov t* riov},${3:int rparts},${4:int offset })
			MsgReadvr@int MsgReadv r(${1: int rcvid},${2:const iov t* riov},${3:int rparts},${4:int offset })
			MsgReceive@int MsgReceive(${1: int chid},${2:void * msg},${3:int bytes},${4:struct msg info * info })
			MsgReceiver@int MsgReceive r(${1: int chid},${2:void * msg},${3:int bytes},${4:struct msg info * info })
			MsgReceivePulse@int MsgReceivePulse(${1: int chid},${2:void * pulse},${3:int bytes},${4:struct msg info * info })
			MsgReceivePulser@int MsgReceivePulse r(${1: int chid},${2:void * pulse},${3:int bytes},${4:struct msg info * info })
			MsgReceivePulsev@int MsgReceivePulsev(${1: int chid},${2:const iov t * piov},${3:int parts},${4:struct msg info * info })
			MsgReceivePulsevr@int MsgReceivePulsev r(${1: int chid},${2:const iov t * piov},${3:int parts},${4:struct msg info * info })
			MsgReceivev@int MsgReceivev(${1: int chid},${2:const iov t * riov},${3:int rparts},${4:struct msg info * info })
			MsgReceivevr@int MsgReceivev r(${1: int chid},${2:const iov t * riov},${3:int rparts},${4:struct msg info * info })
			MsgReply@int MsgReply(${1: int rcvid},${2:int status},${3:const void* msg},${4:int size })
			MsgReplyr@int MsgReply r(${1: int rcvid},${2:int status},${3:const void* msg},${4:int size })
			MsgReplyv@int MsgReplyv(${1: int rcvid},${2:int status},${3:const iov t* riov},${4:int rparts })
			MsgReplyvr@int MsgReplyv r(${1: int rcvid},${2:int status},${3:const iov t* riov},${4:int rparts })
			MsgSend@int MsgSend(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:void* rmsg},${5:int rbytes })
			MsgSendr@int MsgSend r(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:void* rmsg},${5:int rbytes })
			MsgSendnc@int MsgSendnc(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:void* rmsg},${5:int rbytes })
			MsgSendncr@int MsgSendnc r(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:void* rmsg},${5:int rbytes })
			MsgSendPulse@int MsgSendPulse (${1: int coid},${2:int priority},${3:int code},${4:int value })
			MsgSendPulser@int MsgSendPulse r (${1: int coid},${2:int priority},${3:int code},${4:int value })
			MsgSendsv@int MsgSendsv(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:const iov t* riov},${5:int rparts })
			MsgSendsvr@int MsgSendsv r(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:const iov t* riov},${5:int rparts })
			MsgSendsvnc@int MsgSendsvnc(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:const iov t* riov},${5:int rparts })
			MsgSendsvncr@int MsgSendsvnc r(${1: int coid},${2:const void* smsg},${3:int sbytes},${4:const iov t* riov},${5:int rparts })
			MsgSendv@int MsgSendv(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:const iov t* riov},${5:int rparts })
			MsgSendvr@int MsgSendv r(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:const iov t* riov},${5:int rparts })
			MsgSendvnc@int MsgSendvnc(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:const iov t* riov},${5:int rparts })
			MsgSendvncr@int MsgSendvnc r(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:const iov t* riov},${5:int rparts })
			MsgSendvs@int MsgSendvs(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:void* rmsg},${5:int rbytes })
			MsgSendvsr@int MsgSendvs r(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:void* rmsg},${5:int rbytes })
			MsgSendvsnc@int MsgSendvsnc(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:void* rmsg},${5:int rbytes })
			MsgSendvsncr@int MsgSendvsnc r(${1: int coid},${2:const iov t* siov},${3:int sparts},${4:void* rmsg},${5:int rbytes })
			MsgVerifyEvent@int MsgVerifyEvent(${1: int rcvid},${2:const struct sigevent event })
			MsgVerifyEventr@int MsgVerifyEvent r(${1: int rcvid},${2:const struct sigevent event })
			MsgWrite@int MsgWrite(${1: int rcvid},${2:const void* msg},${3:int size},${4:int offset })
			MsgWriter@int MsgWrite r(${1: int rcvid},${2:const void* msg},${3:int size},${4:int offset })
			MsgWritev@int MsgWritev(${1: int rcvid},${2:const iov t* iov},${3:int parts},${4:int offset })
			MsgWritevr@int MsgWritev r(${1: int rcvid},${2:const iov t* iov},${3:int parts},${4:int offset })
			pulse@struct pulse {uint16 t type
			@uint16 t subtype
			@int8 t code
			@uint8 t zero[3]
			@union sigval value
			@int32 t scoid
			@}
			SchedGet@int SchedGet(${1: pid t pid},${2:int tid},${3:struct sched param *param })
			SchedGetr@int SchedGet r(${1: pid t pid},${2:int tid},${3:struct sched param *param })
			SchedInfo@int SchedInfo(${1: pid t pid},${2:int policy},${3:struct sched info* info })
			SchedInfor@int SchedInfo r(${1: pid t pid},${2:int policy},${3:struct sched info* info })
			SchedSet@int SchedSet(${1:pid t pid},${2:int tid},${3:int policy},${4:const struct sched param *param })
			SchedSetr@int SchedSet r(${1:pid t pid},${2:int tid},${3:int policy},${4:const struct sched param *param })
			SchedYield@int SchedYield(${1: void })
			SchedYieldr@int SchedYield r(${1: void })
			SignalAction@int SignalAction(${1: pid t pid},${2:void (${3: * sigstub})(${4:})},${5:int signo},${6:const struct sigaction * act},${7:struct sigaction * oact })
			SignalActionr@int SignalAction r(${1: pid t pid},${2:void * (${3:sigstub})(${4:})},${5:int signo},${6:const struct sigaction * act},${7:struct sigaction * oact })
			SignalKill@int SignalKill(${1: uint32 t nd},${2:pid t pid},${3:int tid},${4:int signo},${5:int code},${6:int value })
			SignalKillr@int SignalKill r(${1: uint32 t nd},${2:pid t pid},${3:int tid},${4:int signo},${5:int code},${6:int value })
			SignalProcmask@int SignalProcmask(${1: pid t pid},${2:int tid},${3:int how},${4:const sigset t* set},${5:sigset t* oldset })
			SignalProcmaskr@int SignalProcmask r(${1: pid t pid},${2:int tid},${3:int how},${4:const sigset t* set},${5:sigset t* oldset })
			SignalSuspend@int SignalSuspend(${1: const sigset t* set })
			SignalSuspendr@int SignalSuspend r(${1: const sigset t* set })
			SignalWaitinfo@int SignalWaitinfo(${1: const sigset t* set},${2:siginfo t* info })
			SignalWaitinfor@int SignalWaitinfo r(${1: const sigset t* set},${2:siginfo t* info })
			SyncCondvarSignal@int SyncCondvarSignal(${1: sync t* sync},${2:int broadcast })
			SyncCondvarSignalr@int SyncCondvarSignal r(${1: sync t* sync},${2:int broadcast })
			SyncCondvarWait@int SyncCondvarWait(${1: sync t * sync},${2:sync t * mutex })
			SyncCondvarWaitr@int SyncCondvarWait r(${1: sync t * sync},${2:sync t * mutex })
			SyncCtl@int SyncCtl(${1: int cmd},${2:sync t * sync},${3:void * data })
			SyncCtlr@int SyncCtl r(${1: int cmd},${2:sync t * sync},${3:void * data })
			SyncDestroy@int SyncDestroy(${1: sync t* sync })
			SyncDestroyr@int SyncDestroy r (${1: sync t* sync })
			SyncMutexEvent@int SyncMutexEvent(${1: sync t * sync},${2:struct sigevent * event })
			SyncMutexEventr@int SyncMutexEvent r(${1: sync t * sync},${2:struct sigevent * event })
			SyncMutexLock@int SyncMutexLock(${1: sync t * sync })
			SyncMutexLockr@int SyncMutexLock r(${1: sync t * sync })
			SyncMutexRevive@int SyncMutexRevive(${1: sync t * sync })
			SyncMutexReviver@int SyncMutexRevive r(${1: sync t * sync })
			SyncMutexUnlock@int SyncMutexUnlock(${1: sync t * sync })
			SyncMutexUnlockr@int SyncMutexUnlock r(${1: sync t * sync })
			SyncSemPost@int SyncSemPost(${1: sync t* sync })
			SyncSemPostr@int SyncSemPost r(${1: sync t* sync })
			SyncSemWait@int SyncSemWait(${1: sync t* sync},${2:int try })
			SyncSemWaitr@int SyncSemWait r(${1: sync t* sync},${2:int try })
			SyncTypeCreate@int SyncTypeCreate(${1:unsigned type},${2:sync t * sync},${3:const struct sync attr t * attr })
			SyncTypeCreater@int SyncTypeCreate r(${1:unsigned type},${2:sync t * sync},${3:const struct sync attr t * attr })
			ThreadCancel@int ThreadCancel(${1: int tid},${2:void (${3:*canstub})(${4:void}) })
			ThreadCancelr@int ThreadCancel r(${1: int tid},${2:void (${3:*canstub})(${4:void}) })
			ThreadCreate@int ThreadCreate(${1:pid t pid},${2:void* (${3:func})(${4: void* })},${5:void* arg},${6:const struct thread attr* attr })
			ThreadCreater@int ThreadCreate r(${1:pid t pid},${2:void* (${3:func})(${4: void* })},${5:void* arg},${6:const struct thread attr* attr })
			ThreadCtl@int ThreadCtl(${1: int cmd},${2:void * data })
			ThreadCtlr@int ThreadCtl r(${1: int cmd},${2:void * data })
			ThreadDestroy@int ThreadDestroy(${1: int tid},${2:int priority},${3:void* status })
			ThreadDestroyr@int ThreadDestroy r(${1: int tid},${2:int priority},${3:void* status })
			ThreadDetach@int ThreadDetach(${1: int tid })
			ThreadDetachr@int ThreadDetach r(${1: int tid })
			ThreadJoin@int ThreadJoin(${1: int tid},${2:void** status })
			ThreadJoinr@int ThreadJoin r(${1: int tid},${2:void** status })
			TimerAlarm@int TimerAlarm(${1: clockid t id},${2:const struct itimer * itime},${3:struct itimer * otime })
			TimerAlarmr@int TimerAlarm r(${1: clockid t id},${2:const struct itimer * itime},${3:struct itimer * otime })
			TimerCreate@int TimerCreate(${1: clockid t id},${2:const struct sigevent *event })
			TimerCreater@int TimerCreate r(${1: clockid t id},${2:const struct sigevent *event })
			TimerDestroy@int TimerDestroy(${1: timer t id })
			TimerDestroyr@int TimerDestroy r(${1: timer t id })
			TimerInfo@int TimerInfo(${1: pid t pid},${2:timer t id},${3:int flags},${4:struct timer info* info })
			TimerInfor@int TimerInfo r(${1: pid t pid},${2:timer t id},${3:int flags},${4:struct timer info* info })
			TimerSettime@int TimerSettime(${1: timer t id},${2:int flags},${3:const struct itimer * itime},${4:struct itimer * oitime })
			TimerSettimer@int TimerSettime r(${1: timer t id},${2:int flags},${3:const struct itimer * itime},${4:struct itimer * oitime })
			TimerTimeout@int TimerTimeout(${1: clockid t id},${2:int flags},${3:const struct sigevent * notify},${4:const uint64 t * ntime},${5:uint64 t * otime })
			TimerTimeoutr@int TimerTimeout r(${1: clockid t id},${2:int flags},${3:const struct sigevent * notify},${4:const uint64 t * ntime},${5:uint64 t * otime })
			TraceEvent@int TraceEvent(${1: int mode},${2:... })
			atomicadd@void atomic add(${1: volatile unsigned * loc},${2:unsigned incr })
			atomicaddvalue@unsigned atomic add value(${1: volatile unsigned * loc},${2:unsigned incr })
			atomicclr@void atomic clr(${1: volatile unsigned * loc},${2:unsigned bits })
			atomicclrvalue@unsigned atomic clr value(${1: volatile unsigned * loc},${2:unsigned bits })
			atomicset@void atomic set(${1: volatile unsigned * loc},${2:unsigned bits })
			atomicsetvalue@unsigned atomic set value(${1: volatile unsigned * loc},${2:unsigned bits })
			atomicsub@void atomic sub(${1: volatile unsigned * loc},${2:unsigned decr })
			atomicsubvalue@unsigned atomic sub value(${1: volatile unsigned * loc},${2:unsigned decr })
			atomictoggle@void atomic toggle(${1: volatile unsigned * loc},${2:unsigned bits })
			atomictogglevalue@unsigned atomic toggle value(${1:volatile unsigned * loc},${2:unsigned bits })
			basename@char* basename(${1: char* path })
			dirname@char *dirname(${1: char *path })
			pathfind@char *pathfind(${1: const char *path},${2:const char *name},${3:const char *mode })
			pathfindr@char *pathfind r(${1: const char *path},${2:const char *name},${3:const char *mode},${4:char *buff},${5:size t buff size })
			bcmp@int bcmp(${1: const void *s1},${2:const void *s2},${3:size t n })
			bcopy@void bcopy(${1: const void *src},${2:void *dst},${3:size t n })
			bzero@void bzero(${1: void *dst},${2:size t n })
			ffs@int ffs(${1: int value })
			index@char* index(${1: const char* s},${2:int c })
			rindex@char *rindex(${1: const char *s},${2:int c })
			strcasecmp@int strcasecmp(${1: const char* str1},${2:const char* str2 })
			strncasecmp@int strncasecmp(${1: const char* str1},${2:const char* str2},${3:size t n })
			bindresvport@int bindresvport(${1: int sd},${2:struct sockaddr in * sin })
			socket@int socket(${1: AF INET },${2:SOCK RAW },${3:proto })
			sockaddrin6@struct sockaddr in6 {uint8 t sin6 len
			@sa family t sin6 family
			@in port t sin6 port
			@uint32 t sin6 flowinfo
			@struct in6 addr sin6 addr
			@uint32 t sin6 scope id
			@}
			inet6optionspace@int inet6 option space(${1:int nbytes})
			inet6optioninit@int inet6 option init(${1:void *bp},${2:struct cmsghdr **cmsgp},${3:int type})
			inet6optionappend@int inet6 option append(${1:struct cmsghdr *cmsg},${2:const u int8 t *typep},${3:int multx},${4:int plusy})
			int8tinet6optionalloc@u int8 t * inet6 option alloc(${1:struct cmsghdr *cmsg},${2:int datalen},${3:int multx},${4:int plusy})
			inet6optionnext@int inet6 option next(${1:const struct cmsghdr *cmsg},${2:u int8 t **tptrp})
			inet6optionfind@int inet6 option find(${1:const struct cmsghdr *cmsg},${2:u int8 t **tptrp},${3:int type})
			tinet6rthdrspace@size t inet6 rthdr space(${1:int type},${2:int segments})
			cmsghdrinet6rthdrinit@struct cmsghdr * inet6 rthdr init(${1:void *bp},${2:int type})
			inet6rthdradd@int inet6 rthdr add(${1:struct cmsghdr *cmsg},${2:const struct in6 addr *addr},${3:unsigned int flags})
			inet6rthdrlasthop@int inet6 rthdr lasthop(${1:struct cmsghdr *cmsg},${2:unsigned int flags})
			inet6rthdrreverse@int inet6 rthdr reverse(${1:const struct cmsghdr *in},${2:struct cmsghdr *out})
			inet6rthdrsegments@int inet6 rthdr segments(${1:const struct cmsghdr *cmsg})
			in6addrinet6rthdrgetaddr@struct in6 addr * inet6 rthdr getaddr(${1:struct cmsghdr *cmsg},${2:int index})
			inet6rthdrgetflags@int inet6 rthdr getflags(${1:const struct cmsghdr *cmsg},${2:int index})
			socket@int socket(${1: AF INET },${2:SOCK RAW },${3:proto })
			socket@int socket(${1: AF INET6 },${2:SOCK RAW },${3:proto})
			socket@int socket(${1: PF INET },${2:SOCK DGRAM },${3:IPPROTO SCTP })
			socket@Or},${1:int socket(${2: PF INET },${3:SOCK STREAM },${4:IPPROTO SCTP })
			socket@int socket(${1: AF INET },${2:SOCK STREAM },${3:0 })
			socket@int socket(${1: AF INET },${2:SOCK DGRAM },${3:0 })
			tbtowc@wint t btowc(${1: int c })
			tfgetwc@wint t fgetwc(${1: FILE * fp })
			tfgetws@wchar t * fgetws(${1: wchar t * buf},${2:int n},${3:FILE * fp })
			tfputwc@wint t fputwc(${1: wchar t wc},${2:FILE * fp })
			fputws@int fputws(${1: const wchar t * ws},${2:FILE * fp })
			fwide@int fwide(${1: FILE * fp},${2:int mode })
			fwprintf@int fwprintf(${1: FILE * fp},${2:const wchar t * format},${3:... })
			fwscanf@int fwscanf(${1: FILE * fp},${2:const wchar t * format},${3:... })
			tgetwc@wint t getwc(${1: FILE * fp })
			tgetwchar@wint t getwchar(${1: void })
			tmbrlen@size t mbrlen(${1: const char * s},${2:size t n},${3:mbstate t * ps})
			tmbrtowc@size t mbrtowc(${1: wchar t * pwc},${2:const char * s},${3:size t n},${4:mbstate t * ps })
			mbsinit@int mbsinit(${1: const mbstate t * ps })
			tmbsrtowcs@size t mbsrtowcs(${1: wchar t * dst},${2:const char ** src},${3:size t n},${4:mbstate t * ps })
			putw@int putw(${1: int w},${2:FILE *stream })
			tputwc@wint t putwc(${1: wchar t wc},${2:FILE * fp })
			tputwchar@wint t putwchar(${1: wchar t wc })
			swprintf@int swprintf(${1: wchar t * ws},${2:size t n},${3:const wchar t * format},${4:... })
			swscanf@int swscanf(${1: const wchar t * ws},${2:const wchar t * format},${3:... })
			tungetwc@wint t ungetwc(${1: wint t wc},${2:FILE * fp })
			twcrtomb@size t wcrtomb(${1: char * s},${2:wchar t wc},${3:mbstate t * ps})
			twcscat@wchar t * wcscat(${1: wchar t * ws1},${2:const wchar t * ws2 })
			twcschr@wchar t * wcschr(${1: const wchar t * ws},${2:wchar t wc })
			wcscmp@int wcscmp(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			wcscoll@int wcscoll(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			twcscpy@wchar t * wcscpy(${1: wchar t * ws1},${2:const char * ws2 })
			twcscspn@size t wcscspn(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			twcsftime@size t wcsftime(${1: wchar t * wcs},${2:size t maxsize},${3:const wchar t * format},${4:const struct tm * timeptr })
			twcslen@size t wcslen(${1: const wchar t * ws })
			twcsncat@wchar t * wcsncat(${1: wchar t * ws1},${2:const wchar t * ws2size t n })
			wcsncmp@int wcsncmp(${1: const wchar t * ws1},${2:const wchar t * ws2},${3:size t n })
			twcsncpy@wchar t * wcsncpy(${1: wchar t * ws1},${2:const char * ws2},${3:size t n })
			twcspbrk@wchar t * wcspbrk(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			twcsrchr@wchar t * wcsrchr(${1: const wchar t * ws},${2:wchar t wc })
			twcsrtombs@size t wcsrtombs(${1: char * dst},${2:const wchar t ** src},${3:size t len},${4:mbstate t * ps})
			twcsspn@size t wcsspn(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			twcsstr@wchar t * wcsstr(${1: const wchar t * ws1},${2:const wchar t * ws2 })
			wcstod@double wcstod(${1: const wchar t * ptr},${2:wchar t ** endptr })
			wcstof@float wcstof(${1: const wchar t * ptr},${2:wchar ** endptr })
			doublewcstold@long double wcstold(${1: const wchar t * ptr},${2:wchar ** endptr })
			twcstok@wchar t * wcstok(${1: wchar t * ws1},${2:const wchar t * ws2},${3:wchar t ** ptr })
			wcscfrm@int wcscfrm(${1: wchar t * ws1},${2:const wchar t * ws2},${3:size t n })
			wctob@int wctob(${1: wint t c })
			twmemchr@wchar t * wmemchr(${1: const wchar t * ws},${2:wchar t wc},${3:size t n })
			wmemcmp@int wmemcmp(${1: const wchar t * ws1},${2:const wchar t * ws2},${3:size t n })
			twmemcpy@wchar t * wmemcpy(${1: wchar t * ws1},${2:const wchar t * ws2},${3:size t n })
			twmemmove@wchar t * wmemmove(${1: wchar t * ws1},${2:const wchar t * ws2},${3:size t n })
			wprintf@int wprintf(${1: const char* format},${2:... })
			wscanf@int wscanf(${1: const char * format},${2:... })
			cfmakeraw@int cfmakeraw(${1: struct termios * termios p })
			tcfgetispeed@speed t cfgetispeed(${1:const struct termios* termios p })
			tcfgetospeed@speed t cfgetospeed(${1:const struct termios* termios p })
			cfsetispeed@int cfsetispeed(${1: struct termios* termios p},${2:speed t speed })
			cfsetospeed@int cfsetospeed(${1: struct termios *termios p},${2:speed t speed })
			tcdrain@int tcdrain(${1: int fildes })
			tcdropline@int tcdropline(${1: int fd},${2:int duration })
			tcflow@int tcflow(${1: int fildes},${2:int action })
			tcflush@int tcflush(${1: int fildes},${2:int queue selector })
			tcgetattr@int tcgetattr(${1: int fildes},${2:struct termios *termios p })
			tcgetsize@int tcgetsize(${1: int filedes},${2:int* prows},${3:int* pcols })
			tcinject@int tcinject(${1: int fd},${2:char *buf},${3:int n })
			tcischars@int tcischars(${1: int filedes })
			tcsendbreak@int tcsendbreak(${1: int fildes},${2:int duration })
			tcsetattr@int tcsetattr(${1: int fildes},${2:int optional actions},${3:const struct termios *termios p })
			tcsetsid@int tcsetsid(${1: int fd},${2:pid t pid })
			tcsetsize@int tcsetsize(${1: int filedes},${2:int rows},${3:int cols })
			cfgopen@int cfgopen(${1: const char * path},${2:unsigned flags},${3:const char * historical},${4:char * namebuf},${5:int nblen })
			fcfgopen@FILE * fcfgopen(${1: const char * path},${2:const char * mode},${3:int location},${4:const char * historical},${5:char * namebuf},${6:int nblen })
			cfree@int cfree(${1: void *ptr })
			mallinfomallinfo@struct mallinfo mallinfo (${1: void })
			mallopt@int mallopt(${1: int cmd},${2:int value })
			mcheck@int mcheck(${1:void (${2:* abort fn})(${3:enum mcheck status status})})
			memalign@void *memalign(${1: size t alignment},${2:size t size })
			mcheckstatusmprobe@enum mcheck status mprobe(${1:void * ptr})
			scalloc@void* scalloc(${1: size t size })
			sfree@void sfree(${1: void *ptr},${2:size t size })
			smalloc@void* smalloc(${1: size t size })
			srealloc@void * srealloc(${1: void* ptr},${2:size t old size},${3:size t new size })
			chmod@int chmod(${1: const char * path},${2:mode t mode })
			fchmod@int fchmod(${1: int fd},${2:mode t mode })
			fstat@int fstat(${1: int filedes},${2:struct stat* buf })
			fstat64@int fstat64(${1: int filedes},${2:struct stat64* buf })
			isfdtype@int isfdtype(${1: int filedes},${2:int fdtype })
			lstat@int lstat(${1: const char* path},${2:struct stat* buf })
			lstat64@int lstat64(${1: const char* path},${2:struct stat64* buf })
			mkdir@int mkdir(${1: const char *path},${2:mode t mode })
			mkfifo@int mkfifo(${1: const char* path},${2:mode t mode })
			mknod@int mknod(${1: const char * path},${2:mode t mode},${3:dev t dev })
			stat@int stat(${1: const char * path},${2:struct stat * buf })
			stat64@int stat64(${1: const char * path},${2:struct stat64 * buf })
			tumask@mode t umask(${1: mode t cmask })
			clearerr@void clearerr(${1: FILE *fp })
			ctermid@char * ctermid(${1: char * s })
			fclose@int fclose(${1: FILE* fp })
			fcloseall@int fcloseall(${1: void })
			fdopen@FILE* fdopen(${1: int filedes},${2:const char* mode })
			feof@int feof(${1: FILE* fp })
			ferror@int ferror(${1: FILE* fp })
			fflush@int fflush(${1: FILE* fp })
			fgetc@int fgetc(${1: FILE* fp })
			fgetchar@int fgetchar(${1: void })
			fgetpos@int fgetpos(${1: FILE* fp},${2:fpos t* pos })
			fgets@char* fgets(${1: char* buf},${2:size t n},${3:FILE* fp })
			fileno@int fileno(${1: FILE * stream })
			flockfile@void flockfile(${1: FILE* file })
			flushall@int flushall(${1: void })
			fopen@FILE * fopen(${1: const char * filename},${2:const char * mode })
			fopen64@FILE * fopen64(${1: const char * filename},${2:const char * mode })
			fprintf@int fprintf(${1: FILE* fp},${2:const char* format},${3:... })
			fputc@int fputc(${1: int c},${2:FILE* fp })
			fputchar@int fputchar(${1: int c })
			fputs@int fputs(${1: const char* buf},${2:FILE* fp })
			tfread@size t fread(${1: void* buf},${2:size t size},${3:size t num},${4:FILE* fp })
			freopen@FILE* freopen(${1: const char* filename},${2:const char* mode},${3:FILE* fp })
			freopen64@FILE* freopen64(${1: const char* filename},${2:const char* mode},${3:FILE* fp })
			fscanf@int fscanf(${1: FILE* fp},${2:const char* format},${3:... })
			fseek@int fseek(${1: FILE* fp},${2:long offset},${3:int whence })
			fseeko@int fseeko(${1: FILE* fp},${2:off t offset},${3:int whence })
			fsetpos@int fsetpos(${1: FILE* fp},${2:const fpos t* pos })
			intftell@long int ftell(${1: FILE* fp })
			tftello@off t ftello(${1: FILE* fp })
			ftrylockfile@int ftrylockfile(${1: FILE* file })
			funlockfile@void funlockfile(${1: FILE* file })
			tfwrite@size t fwrite(${1: const void* buf},${2:size t size},${3:size t num},${4:FILE* fp })
			getc@int getc(${1: FILE* fp })
			getcunlocked@int getc unlocked(${1: FILE *fp })
			getchar@int getchar(${1: void })
			getcharunlocked@int getchar unlocked(${1: void })
			gets@char *gets(${1: char *buf })
			getw@int getw(${1: FILE* stream })
			inputline@char* input line(${1: FILE* fp},${2:char* buf},${3:int bufsize })
			@extern int input line max
			pclose@int pclose(${1: FILE* stream })
			perror@void perror(${1: const char *prefix })
			popen@FILE* popen(${1: const char* command},${2:const char* mode })
			printf@int printf(${1: const char * format},${2:... })
			putc@int putc(${1: int c},${2:FILE* fp })
			putcunlocked@int putc unlocked(${1: int c},${2:FILE *stream })
			putchar@int putchar(${1: int c })
			putcharunlocked@int putchar unlocked(${1: int c })
			puts@int puts(${1: const char *buf })
			remove@int remove(${1: const char * filename })
			rename@int rename(${1: const char* old},${2:const char* new })
			rewind@void rewind(${1: FILE *fp })
			scanf@int scanf(${1: const char* format},${2:... })
			setbuf@void setbuf(${1: FILE *fp},${2:char *buffer })
			setvbuf@int setvbuf(${1: FILE *fp},${2:char *buf},${3:int mode},${4:size t size })
			snprintf@int snprintf(${1: char* buf},${2:size t count},${3:const char* format},${4:... })
			sprintf@int sprintf(${1: char* buf},${2:const char* format},${3:... })
			sscanf@int sscanf(${1: const char* in string},${2:const char* format},${3:... })
			@FILE * stderr
			@FILE * stdin
			@FILE * stdout
			tempnam@char* tempnam(${1: const char* dir},${2:const char* pfx })
			tmpfile@FILE* tmpfile(${1: void })
			tmpfile64@FILE* tmpfile64(${1: void })
			tmpnam@char* tmpnam(${1: char* buffer })
			ungetc@int ungetc(${1: int c},${2:FILE *fp })
			vsnprintf@int vsnprintf(${1: char* buf},${2:size t count},${3:const char* format},${4:va list arg })
			tClockCycles@uint64 t ClockCycles(${1: void })
			intClockId@extern int ClockId(${1: pid t pid},${2:int tid })
			intClockIdr@extern int ClockId r(${1: pid t pid},${2:int tid })
			tstrtoimax@intmax t strtoimax (${1: const char * nptr},${2:char ** endptr},${3:int base })
			tstrtoumax@uintmax t strtoumax (${1: const char * nptr},${2:char ** endptr},${3:int base })
			twcstoimax@intmax t wcstoimax (${1: const wchar t * nptr},${2:wchar t ** endptr},${3:int base })
			twcstoumax@uintmax t wcstoumax (${1: const wchar t * nptr},${2:wchar t ** endptr},${3:int base })
			closedir@int closedir(${1: DIR * dirp })
			dircntl@int dircntl(${1: DIR * dir},${2:int cmd},${3:... })
			opendir@DIR * opendir(${1: const char * dirname })
			direntreaddir@struct dirent * readdir(${1: DIR * dirp })
			readdirr@int readdir r(${1: DIR * dirp},${2:struct dirent * entry},${3:struct direct ** result })
			rewinddir@void rewinddir(${1: DIR * dirp })
			seekdir@void seekdir(${1: DIR * dirp},${2:long int pos })
			inttelldir@long int telldir(${1: DIR * dirp })
			closelog@void closelog(${1: void })
			openlog@void openlog(${1: const char * ident},${2:int logopt},${3:int facility })
			setlogmask@int setlogmask(${1: int maskpri })
			cmdfd@int cmdfd(${1: void })
			cmdname@char * cmdname(${1: char * buff })
			execl@int execl(${1: const char * path},${2:const char * arg0},${3:const char * arg1},${4:...const char * argn},${5:NULL })
			execle@int execle(${1: const char * path},${2:const char * arg0},${3:const char * arg1},${4:...const char * argn},${5:NULL},${6:const char * envp[] })
			execlp@int execlp(${1: const char * file},${2:const char * arg0},${3:const char * arg1},${4:...const char * argn},${5:NULL })
			execlpe@int execlpe(${1: const char * file},${2:const char * arg0},${3:const char * arg1},${4:...const char * argn},${5:NULL},${6:const char * envp[] })
			execv@int execv(${1: const char * path},${2:char * const argv[] })
			execve@int execve(${1: const char * path},${2:char * const argv[]},${3:char * const envp[] })
			execvp@int execvp(${1: const char * file},${2:char * const argv[] })
			execvpe@int execvpe(${1: const char * file},${2:char * const argv[]},${3:char * const envp[] })
			tfork@pid t fork(${1: void })
			tgetpgrp@pid t getpgrp(${1: void })
			tgetpid@pid t getpid(${1: void })
			tgetppid@pid t getppid(${1: void })
			pthreadatfork@int pthread atfork(${1: void (${2:*prepare})(${3:void})},${4:void (${5:*parent})(${6:void})},${7:void (${8:*child})(${9:void}) })
			setpgid@int setpgid(${1: pid t pid},${2:pid t pgid })
			spawnl@int spawnl(${1: int mode},${2:const char * path},${3:const char * arg0},${4:const char * arg1...},${5:const char * argn},${6:NULL })
			spawnle@int spawnle(${1: int mode},${2:const char * path},${3:const char * arg0},${4:const char * arg1...},${5:const char * argn},${6:NULL},${7:const char * envp[] })
			spawnlp@int spawnlp(${1: int mode},${2:const char * file},${3:const char * arg0},${4:const char * arg1...},${5:const char * argn},${6:NULL })
			spawnlpe@int spawnlpe(${1: int mode},${2:const char * file},${3:const char * arg0},${4:const char * arg1...},${5:const char * argn},${6:NULL},${7:const char * envp[] })
			spawnv@int spawnv(${1: int mode},${2:const char * path},${3:char * const argv[] })
			spawnve@int spawnve(${1: int mode},${2:const char * path},${3:char * const argv[]},${4:char * const envp[] })
			spawnvp@int spawnvp(${1: int mode},${2:const char * file},${3:char * const argv[] })
			tvfork@pid t vfork(${1: void })
			creat@int creat(${1: const char* path},${2:mode t mode })
			creat64@int creat64(${1: const char* path},${2:mode t mode })
			fcntl@int fcntl(${1: int fildes},${2:int cmd},${3:... })
			flock@int flock(${1: int filedes},${2:int operation })
			open@int open(${1: const char * path},${2:int oflag},${3:... })
			open64@int open64(${1: const char * path},${2:int oflag},${3:... })
			devctl@int devctl(${1: int filedes},${2:int dcmd},${3:void * dev data ptr},${4:size t n bytes},${5:int * dev info ptr })
			contexttdispatchblock@on id=
			contexttdispatchcontextalloc@on id=
			dispatchcontextfree@void dispatch context free(${1:dispatch context t * ctp })
			tdispatchcreate@dispatch t *dispatch create(${1: void })
			dispatchdestroy@int dispatch destroy(${1: dispatch t *dpp })
			dispatchhandler@int dispatch handler(${1: dispatch context t * ctp })
			dispatchtimeout@int dispatch timeout(${1: dispatch t *dpp},${2:struct timespec *reltime })
			dispatchunblock@void dispatch unblock(${1: dispatch context t * ctp })
			messageattach@int message attach(${1: dispatch t * dpp},${2:message attr t * attr},${3:int low},${4:int high},${5:int (${6:* func}) (${7:message context t * ctp},${8:int code},${9:unsigned flags},${10:void * handle })},${11:void * handle })
			messageconnect@int message connect(${1: dispatch t * dpp},${2:int flags })
			messagedetach@int message detach(${1: dispatch t * dpp},${2:int low},${3:int high},${4:int flags })
			attachtnameattach@name attach t * name attach(${1: dispatch t * dpp},${2:const char * path},${3:unsigned flags })
			nameclose@int name close(${1: int filedes })
			namedetach@int name detach(${1: name attach t * attach},${2:unsigned flags })
			nameopen@int name open(${1: const char * name},${2:int flags })
			pulseattach@int pulse attach(${1: dispatch t * dpp},${2:int flags},${3:int code},${4:int (${5:* func})(${6: message context t * ctp},${7:int code},${8:unsigned flags},${9:void * handle })},${10:void * handle })
			pulsedetach@int pulse detach(${1: dispatch t * dpp},${2:int code},${3:int flags })
			resmgrattach@int resmgr attach (${1:dispatch t *dpp},${2:resmgr attr t *attr},${3:const char *path},${4:enum file type file type},${5:unsigned flags},${6:const resmgr connect funcs t *connect funcs},${7:const resmgr io funcs t *io funcs},${8:RESMGR HANDLE T *handle })
			contexttresmgrblock@on id=
			contexttresmgrcontextalloc@on id=
			resmgrcontextfree@void resmgr context free(${1: resmgr context t * ctp })
			resmgrdetach@int resmgr detach(${1: dispatch t * dpp},${2:int id},${3:unsigned flags })
			resmgrhandler@int resmgr handler(${1: resmgr context t * ctp })
			selectattach@on id=
			selectdetach@int select detach(${1: void *dpp},${2:int fd })
			selectquery@on id=
			pooltthreadpoolcreate@thread pool t * thread pool create (${1:thread pool attr t * pool attr},${2:unsigned flags })
			threadpooldestroy@int thread pool destroy(${1: thread pool t * pool })
			threadpoollimits@int thread pool limits(${1: thread pool t * pool},${2:int lowater},${3:int hiwater},${4:int maximum},${5:int increment},${6:unsigned flags })
			threadpoolstart@int thread pool start(${1: void *pool })
			dladdr@int dladdr(${1: void *address},${2:Dl info *dlip })
			dlclose@int dlclose(${1: void *handle })
			dlerror@char *dlerror(${1: void })
			dlopen@void * dlopen(${1: const char * pathname},${2:int mode })
			dlsym@void* dlsym(${1: void* handle},${2:const char* name })
			dncomp@int dn comp(${1: const char * exp dn},${2:u char * comp dn},${3:int length},${4:u char ** dnptrs},${5:u char ** lastdnptr })
			dnexpand@int dn expand(${1: const u char * msg},${2:const u char * eomorig},${3:const u char * comp dn},${4:char * exp dn},${5:int length })
			resinit@int res init(${1: void })
			resmkquery@int res mkquery(${1: int op},${2:const char * dname},${3:int class},${4:int type},${5:const u char * data},${6:int datalen},${7:const u char * newrr},${8:u char * buf},${9:int buflen })
			resquery@int res query(${1: const char * dname},${2:int class},${3:int type},${4:u char * answer},${5:int anslen })
			resquerydomain@int res querydomain(${1: const char * name},${2:const char * domain},${3:int class},${4:int type},${5:u char * answer},${6:int anslen })
			ressearch@int res search(${1: const char * dname},${2:int class},${3:int type},${4:u char * answer},${5:int anslen })
			ressend@int res send(${1: const u char * msg},${2:int msglen},${3:u char * answer},${4:int anslen })
			dsclear@int ds clear(${1: ds t dsdes},${2:const char* variable name })
			dscreate@int ds create(${1: ds t dsdes},${2:const char * variable name},${3:char flags},${4:struct sigevent * sigevent })
			dsderegister@int ds deregister(${1: ds t dsdes })
			dsflags@int ds flags(${1: ds t dsdes},${2:const char* variable name},${3:char flags })
			dsget@int ds get(${1: ds t dsdes},${2:const char* variable name},${3:const char* variable data},${4:size t data len })
			tdsregister@ds t ds register(${1: void })
			dsset@int ds set(${1: ds t dsdes},${2:const char* variable name},${3:const char* variable data},${4:size t data len })
			endgrent@int endgrent(${1: void })
			groupgetgrent@struct group* getgrent(${1: void })
			groupgetgrgid@struct group* getgrgid(${1: gid t gid })
			getgrgidr@int getgrgid r (${1: gid t gid},${2:struct group* grp},${3:char* buffer},${4:size t bufsize},${5:struct group** result })
			groupgetgrnam@struct group* getgrnam(${1: const char* name })
			getgrnamr@int getgrnam r(${1: const char* name},${2:struct group* grp},${3:char* buffer},${4:size t bufsize},${5:struct group** result })
			setgrent@int setgrent(${1: void })
			endhostent@void endhostent(${1: void })
			endnetent@void endnetent(${1: void })
			endprotoent@void endprotoent(${1: void })
			endservent@void endservent(${1: void })
			freeaddrinfo@void freeaddrinfo(${1: struct addrinfo * ai })
			chargaistrerror@const char * gai strerror(${1: int ecode })
			getaddrinfo@int getaddrinfo(${1: const char * nodename},${2:const char * servname},${3:const struct addrinfo * hints},${4:struct addrinfo ** res })
			hostentgethostbyaddr@struct hostent * gethostbyaddr(${1: const void * addr},${2:socklen t len},${3:int type })
			hostentgethostbyaddrr@struct hostent * gethostbyaddr r(${1:const void * addr},${2:socklen t length},${3:int type},${4:struct hostent * result},${5:char * buffer},${6:int buflen},${7:int * h errnop })
			hostentgethostbyname@struct hostent * gethostbyname(${1: const char * name })
			hostentgethostbyname2@struct hostent * gethostbyname2(${1: const char * name},${2:int af })
			hostentgethostbynamer@struct hostent *gethostbyname r(${1:const char * name},${2:struct hostent * result},${3:char * buffer},${4:int bufflen},${5:int * h errnop })
			hostentgethostent@struct hostent * gethostent(${1: void })
			hostentgethostentr@struct hostent * gethostent r(${1: FILE ** hostf},${2:struct hostent * result},${3:char * buffer},${4:int buflen},${5:int * h errnop })
			getnameinfo@int getnameinfo(${1:const struct sockaddr *sa},${2:socklen t salen},${3:char *host},${4: size t hostlen},${5:char *serv},${6: size t servlen},${7:int flags})
			netentgetnetbyaddr@struct netent * getnetbyaddr(${1: uint32 t net},${2:int type })
			netentgetnetbyname@struct netent * getnetbyname(${1: const char * name })
			netentgetnetent@struct netent * getnetent(${1: void })
			protoentgetprotobyname@struct protoent * getprotobyname(${1: const char * name })
			protoentgetprotobynumber@struct protoent * getprotobynumber(${1: int proto })
			protoentgetprotoent@struct protoent * getprotoent(${1: void })
			serventgetservbyname@struct servent * getservbyname(${1: const char * name},${2:const char * proto })
			serventgetservbyport@struct servent * getservbyport(${1: int port},${2:const char * proto })
			serventgetservent@struct servent * getservent(${1: void })
			@extern int h errno
			herror@void herror(${1: const char* prefix })
			hostent@struct hostent {char * h name
			@char ** h aliases
			@int h addrtype
			@int h length
			@char ** h addr list
			@}
			charhstrerror@const char* hstrerror(${1: int err })
			netent@struct netent {char * n name
			@char ** n aliases
			@int n addrtype
			@uint32 t n net
			@}
			protoent@struct protoent {char * p name
			@char ** p aliases
			@int p proto
			@}
			servent@struct servent {char * s name
			@char ** s aliases
			@int s port
			@char * s proto
			@}
			sethostent@void sethostent(${1: int stayopen })
			setnetent@void setnetent(${1: int stayopen })
			setprotoent@void setprotoent(${1: int stayopen })
			setservent@void setservent(${1: int stayopen })
			tENDIANBE16@uint16 t ENDIAN BE16(${1: uint16 t num })
			tENDIANBE32@uint32 t ENDIAN BE32(${1: uint32 t num })
			tENDIANBE64@uint64 t ENDIAN BE64(${1: uint64 t num })
			tENDIANLE16@uint16 t ENDIAN LE16(${1: uint16 t num })
			tENDIANLE32@uint32 t ENDIAN LE32(${1: uint32 t num })
			tENDIANLE64@uint64 t ENDIAN LE64(${1: uint64 t num })
			tENDIANRET16@uint16 t ENDIAN RET16(${1: uint16 t num })
			tENDIANRET32@uint32 t ENDIAN RET32(${1: uint32 t num })
			tENDIANRET64@uint64 t ENDIAN RET64(${1: uint64 t num })
			ENDIANSWAP16@void ENDIAN SWAP16(${1: uint16 t * num })
			ENDIANSWAP32@void ENDIAN SWAP32(${1: uint32 t * num })
			ENDIANSWAP64@void ENDIAN SWAP64(${1: uint64 t * num })
			UNALIGNEDPUT16@void UNALIGNED PUT16(${1: uint16 t *loc},${2:uint16 t num })
			UNALIGNEDPUT32@void UNALIGNED PUT32(${1: uint32 t *loc},${2:uint32 t num })
			UNALIGNEDPUT64@void UNALIGNED PUT64(${1: uint64 t * loc},${2:uint64 t num })
			tUNALIGNEDRET16@uint16 t UNALIGNED RET16(${1: const uint16 t *loc })
			tUNALIGNEDRET32@uint32 t UNALIGNED RET32(${1: const uint32 t *loc })
			tUNALIGNEDRET64@uint64 t UNALIGNED RET64(${1: const uint64 t * loc })
			endpwent@int endpwent(${1: void })
			passwdgetpwent@struct passwd* getpwent(${1: void })
			passwdgetpwnam@struct passwd* getpwnam(${1: const char* name })
			getpwnamr@int getpwnam r(${1: const char* name},${2:struct passwd* pwd},${3:char* buffer},${4:size t bufsize},${5:struct passwd* result })
			passwdgetpwuid@struct passwd* getpwuid(${1: uid t uid })
			getpwuidr@int getpwuid r(${1: uid t uid},${2:struct passwd* pwd},${3:char* buffer},${4:size t bufsize},${5:struct passwd** result })
			setpwent@int setpwent(${1: void })
			endspent@void endspent(${1: void })
			spwdfgetspent@struct spwd* fgetspent(${1: FILE* f })
			spwdgetspent@struct spwd* getspent(${1: void })
			spwdgetspentr@struct spwd* getspent r(${1: struct spwd* result},${2:char* buffer},${3:int buflen })
			spwdgetspnam@struct spwd* getspnam(${1: char* name })
			spwdgetspnamr@struct spwd* getspnam r(${1: const char* name},${2:struct spwd* result},${3:char* buffer},${4:size t bufsize })
			putspent@int putspent(${1: const struct spwd* p},${2:FILE* fp })
			setspent@void setspent(${1: void })
			endutent@void endutent(${1: void })
			utmpgetutent@struct utmp * getutent(${1: void })
			utmpgetutid@struct utmp * getutid(${1: struct utmp * id })
			utmpgetutline@struct utmp * getutline(${1: struct utmp * line })
			pututline@void pututline(${1: struct utmp * utmp })
			setutent@void setutent(${1: void })
			utmpname@void utmpname(${1: char * filename })
			err@void err(${1: int eval},${2:const char *fmt},${3: ...})
			errx@void errx(${1: int eval},${2:const char *fmt},${3: ...})
			verr@void verr(${1: int eval},${2:const char *fmt},${3:va list args })
			verrx@void verrx(${1: int eval},${2:const char *fmt},${3:va list args })
			vwarn@void vwarn(${1: const char *fmt},${2:va list args })
			vwarnx@void vwarnx(${1: const char *fmt},${2:va list args })
			warn@void warn(${1: const char* fmt},${2: ...})
			warnx@void warnx(${1: const char* fmt},${2: ...})
			@extern int errno
			@char * const sys errlist[]
			@int sys nerr
			fnmatch@int fnmatch(${1: const char* pat},${2:const char* str},${3:int flags })
			tforkpty@pid t forkpty(${1: int *amaster},${2:char *name},${3:struct termios *termp},${4:struct winsize *winp })
			logintty@int login tty(${1: int fd })
			intnap@unsigned int nap(${1: unsigned int ms})
			openpty@int openpty(${1: int* amaster},${2:int* aslave},${3:char* name},${4:struct termios* termp},${5:struct winsize* winp })
			rdchk@int rdchk(${1: int fd })
			recomp@char *re comp(${1: char *s })
			reexec@int re exec(${1: char *s })
			setbuffer@void setbuffer(${1: FILE *iop},${2:char *abuf},${3:size t asize })
			setlinebuf@int setlinebuf(${1: FILE *iop })
			sigblock@int sigblock(${1: int mask })
			sigsetmask@int sigsetmask(${1: int mask })
			sigunblock@int sigunblock(${1: int mask })
			fpexceptionmask@int fp exception mask (${1: int new mask},${2:int set })
			fpexceptionvalue@int fp exception value(${1: int mask })
			fpprecision@int fp precision(${1: int newprecision })
			fprounding@int fp rounding(${1: int newrounding })
			freeifaddrs@void freeifaddrs(${1: struct ifaddrs * ifap })
			getifaddrs@int getifaddrs(${1: struct ifaddrs ** ifap })
			ifaddrs@struct ifaddrs {struct ifaddrs * ifa next
			@char * ifa name
			@u int ifa flags
			@struct sockaddr * ifa addr
			@struct sockaddr * ifa netmask
			@struct sockaddr * ifa dstaddr
			@void * ifa data
			@}
			fstatvfs@int fstatvfs(${1: int fildes},${2:struct statvfs *buf })
			fstatvfs64@int fstatvfs64(${1: int fildes},${2:struct statvfs64 *buf })
			statvfs@int statvfs(${1: const char *path},${2:struct statvfs *buf })
			statvfs64@int statvfs64(${1: const char *path},${2:struct statvfs64 *buf })
			ftime@int ftime(${1: struct timeb * timeptr })
			ftw@int ftw(${1: const char *path},${2:int (${3:* fn })(${4: const char *fname},${5:const struct stat *sbuf},${6:int flags})},${7:int depth })
			nftw@int nftw(${1: const char *path},${2:int (${3:* fn })(${4: const char *fname},${5:const struct stat *sbuf},${6:int flags},${7:struct FTW *ftw})},${8:int depth},${9:int flags})
			futime@int futime(${1: int fildes},${2:const struct utimbuf *times })
			utimbuf@struct utimbuf {time t actime /* access time */
			@time t modtime /* modification time */
			@}
			utimbuf@struct utimbuf {time t actime /* access time */
			@time t modtime /* modification time */
			@}
			utime@int utime(${1: const char* path},${2:const struct utimbuf* times })
			getitimer@int getitimer (${1: int which},${2:struct itimerval *value })
			gettimeofday@int gettimeofday(${1: struct timeval * when},${2:void * not used })
			setitimer@int setitimer (${1: int which},${2:const struct itimerval *value},${3:struct itimerval *ovalue })
			settimeofday@int settimeofday(${1: const struct timeval *when},${2:void *not used })
			utimes@int utimes(${1: const char * path},${2:const struct timeval * times })
			getprio@int getprio(${1: pid t pid })
			pthreadattrgetschedparam@int pthread attr getschedparam(${1:const pthread attr t * attr},${2:struct sched param * param })
			pthreadattrgetschedpolicy@int pthread attr getschedpolicy(${1:const pthread attr t* attr},${2:int* policy })
			pthreadattrsetschedparam@int pthread attr setschedparam(${1:pthread attr t * attr},${2:const struct sched param * param })
			pthreadattrsetschedpolicy@int pthread attr setschedpolicy(${1:pthread attr t* attr},${2:int policy })
			schedgetparam@int sched getparam(${1: pid t pid},${2:struct sched param *param })
			schedgetpriorityadjust@int sched get priority adjust(${1: int prio},${2:int policy},${3:int adjust })
			schedgetprioritymax@int sched get priority max(${1: int policy })
			schedgetprioritymin@int sched get priority min(${1: int policy })
			schedgetscheduler@int sched getscheduler(${1: pid t pid })
			schedparam@struct sched param {int32 t sched priority
			@int32 t sched curpriority
			@union {int32 t reserved[8]
			@struct {int32 t ss low priority
			@int32 t ss max repl
			@struct timespec ss repl period
			@struct timespec ss init budget
			@} ss
			@} ss un
			schedrrgetinterval@int sched rr get interval(${1:pid t pid},${2:struct timespec * interval })
			schedsetparam@int sched setparam(${1:pid t pid},${2:const struct sched param *param })
			schedsetscheduler@int sched setscheduler(${1:pid t pid},${2:int policy},${3:const struct sched param *param })
			schedyield@int sched yield(${1: void })
			setprio@int setprio(${1: pid t pid},${2:int prio })
			getrlimit@int getrlimit(${1: int resource},${2:struct rlimit * rlp })
			getrlimit64@int getrlimit64(${1: int resource},${2:struct rlimit64 * rlp })
			getrusage@int getrusage(${1: int who},${2:struct rusage * r usage })
			setrlimit@int setrlimit(${1: int resource},${2:const struct rlimit * rlp })
			setrlimit64@int setrlimit64(${1: int resource},${2:const struct rlimit64 * rlp })
			glob@int glob(${1: const char* pattern},${2:int flags},${3:int (${4:*errfunc})(${5: const char* epath},${6:int error })},${7:glob t* pglob })
			globfree@void globfree(${1: glob t* pglob })
			hcreate@int hcreate(${1: size t nel })
			hdestroy@void hdestroy(${1: void })
			hsearch@ENTRY* hsearch (${1: ENTRY item},${2:ACTION action })
			lfind@void * lfind(${1: const void * key},${2:const void * base},${3:unsigned * num},${4:unsigned width},${5:int (${6: * compare})(${7:const void * element1},${8:const void * element2 }) })
			lsearch@void * lsearch(${1: const void * key},${2:const void * base},${3:unsigned * num},${4:unsigned width},${5:int (${6: * compare})(${7:const void * element1},${8:const void * element2 }) })
			thtonl@uint32 t htonl(${1: uint32 t hostlong })
			thtons@uint16 t htons(${1: uint16 t hostshort })
			addrtinetaddr@in addr t inet addr(${1: const char * cp })
			inetaton@int inet aton(${1: const char * cp},${2:struct in addr * addr })
			longinetlnaof@unsigned long inet lnaof(${1: struct in addr in })
			inaddrinetmakeaddr@struct in addr inet makeaddr(${1: unsigned long net},${2:unsigned long lna })
			inetnetntop@char * inet net ntop(${1: int af},${2:const void * src},${3:int bits},${4:char * dst},${5:size t size })
			longinetnetof@unsigned long inet netof(${1: struct in addr in })
			inetnetpton@int inet net pton(${1: int af},${2:const char * src},${3:void * dst},${4:size t size })
			longinetnetwork@unsigned long inet network(${1: const char * cp })
			inetntoa@char * inet ntoa(${1: struct in addr in })
			inetntoar@char * inet ntoa r(${1: struct in addr in},${2:char * buffer},${3:int bufflen })
			charinetntop@const char * inet ntop(${1: int af},${2:const void * src},${3:char * dst},${4:socklen t size })
			inetpton@int inet pton(${1: int af},${2:const char * src},${3:void * dst })
			tntohl@uint32 t ntohl(${1: uint32 t netlong })
			tntohs@uint16 t ntohs(${1: uint16 t netshort })
			hwifinditem@unsigned hwi find item(${1: unsigned start},${2:... })
			hwifindtag@unsigned hwi find tag(${1: unsigned start},${2:int curr item},${3:const char * tagname })
			hwioff2tag@void * hwi off2tag(${1: unsigned offsect })
			hwitag2off@unsigned hwi tag2off(${1: void *tag })
			socket@int socket(${1: AF INET6},${2:SOCK RAW},${3:proto})
			iffreenameindex@void if freenameindex(${1: struct if nameindex * ptr })
			ifindextoname@char * if indextoname(${1: unsigned int ifindex},${2:char * ifname })
			ifnameindexifnameindex@struct if nameindex * if nameindex(${1: void })
			intifnametoindex@unsigned int if nametoindex(${1: const char * ifname })
			tin8@uint8 t in8(${1: uintptr t port })
			in8s@void * in8s(${1: void * buff},${2:unsigned len},${3:uintptr t port })
			tin16@uint16 t in16(${1: uintptr t port })
			in16s@void * in16s(${1: void * buff},${2:unsigned len},${3:uintptr t port })
			tin32@uint32 t in32(${1: uintptr t port })
			in32s@void * in32s(${1: void * buff},${2:unsigned len},${3:uintptr t port })
			out8@void out8(${1: uintptr t port},${2:uint8 t val })
			out8s@void * out8s(${1: const void * buff},${2:unsigned len},${3:uintptr t port })
			out16@void out16(${1: uintptr t port},${2:uint16 t val })
			out16s@void * out16s(${1: const void * buff},${2:unsigned len},${3:uintptr t port })
			out32@void out32(${1: uintptr t port},${2:uint32 t val })
			out32s@void * out32s(${1: const void * buff},${2:unsigned len},${3:uintptr t port })
			initgroups@int initgroups(${1: const char * name},${2:gid t basegid })
			intrv86@int intr v86(${1: int swi},${2:struct v86reg* regs},${3:void* data},${4:int datasize })
			ioctl@int ioctl(${1: int fd},${2:int request},${3:... })
			iofdinfo@int iofdinfo(${1: int filedes},${2:unsigned flags},${3:struct fdinfo * info},${4:char * path},${5:int maxlen })
			iofuncfdinfodefault@int iofunc fdinfo default(${1: resmgr context t * ctp},${2:io fdinfo t * msg},${3:iofunc ocb t * ocb })
			iofuncattrinit@void iofunc attr init (${1: iofunc attr t *attr},${2:mode t mode},${3:iofunc attr t *dattr},${4:struct client info *info })
			iofuncattrlock@int iofunc attr lock(${1: iofunc attr t *attr })
			structiofuncattr@typedef struct iofunc attr {IOFUNC MOUNT T *mount
			@uint32 t flags
			@int32 t lock tid
			@uint16 t lock count
			@uint16 t count
			@uint16 t rcount
			@uint16 t wcount
			@uint16 t rlocks
			@uint16 t wlocks
			@struct iofunc mmap list *mmap list
			@struct iofunc lock list *lock list
			@void *list
			@uint32 t list size
			!defined@#if !defined(${1: IOFUNC OFFSET BITS}) || IOFUNC OFFSET BITS == 64#if FILE OFFSET BITS - 0 == 64off t nbytes
			@ino t inode
			@#elseoff64 t nbytes
			@ino64 t inode
			IOFUNCOFFSETBITS-0==32@on id=
			@off t nbytes hi
			@ino t inode
			@ino t inode hi
			defined@#elif defined(${1: BIGENDIAN })off t nbytes hi
			@off t nbytes
			@ino t inode hi
			@ino t inode
			endiannotconfiguredforsystem@on id=
			@int32 t nbytes hi
			@int32 t inode
			@int32 t inode hi
			defined@#elif defined(${1: BIGENDIAN })int32 t nbytes hi
			@int32 t nbytes
			@int32 t inode hi
			@int32 t inode
			@#else#error endian not configured for system#endif#endif#else#error IOFUNC OFFSET BITS value is unsupported#endifuid t uid
			@gid t gid
			@time t mtime
			@time t atime
			@time t ctime
			@mode t mode
			@nlink t nlink
			@dev t rdev
			@} iofunc attr t
			iofuncattrtrylock@int iofunc attr trylock(${1: iofunc attr t *attr })
			iofuncattrunlock@int iofunc attr unlock(${1: iofunc attr t *attr })
			iofunccheckaccess@int iofunc check access(${1:resmgr context t *ctp},${2:const iofunc attr t *attr},${3:mode t checkmode},${4:const struct client info *info })
			iofuncchmod@int iofunc chmod (${1: resmgr context t *ctp},${2:io chmod t *msg},${3:iofunc ocb t *ocb},${4:iofunc attr t *attr })
			iofuncchmoddefault@int iofunc chmod default(${1: resmgr context t *ctp},${2:io chmod t *msg},${3:iofunc ocb t *ocb })
			iofuncchown@int iofunc chown (${1: resmgr context t *ctp},${2:io chown t *msg},${3:iofunc ocb t *ocb},${4:iofunc attr t *attr })
			iofuncchowndefault@int iofunc chown default(${1: resmgr context t *ctp},${2:io chown t *msg},${3:iofunc ocb t *ocb })
			iofuncclientinfo@int iofunc client info (${1: resmgr context t * ctp},${2:int ioflag},${3:struct client info * info })
			iofuncclosedup@int iofunc close dup(${1: resmgr context t* ctp},${2:io close t* msg},${3:iofunc ocb t* ocb},${4:iofunc attr t* attr })
			iofuncclosedupdefault@int iofunc close dup default(${1:resmgr context t *ctp},${2:io close t *msg},${3:iofunc ocb t *ocb })
			iofunccloseocb@int iofunc close ocb(${1: resmgr context t* ctp},${2:iofunc ocb t* ocb},${3:iofunc attr t* attr })
			iofunccloseocbdefault@int iofunc close ocb default(${1: resmgr context t* ctp},${2:void* reserved},${3:iofunc ocb t* ocb })
			iofuncdevctl@int iofunc devctl(${1: resmgr context t *ctp},${2:io devctl t *msg},${3:iofunc ocb t *ocb},${4:iofunc attr t *attr })
			iofuncdevctldefault@int iofunc devctl default(${1: resmgr context t *ctp},${2:io devctl t *msg},${3:iofunc ocb t *ocb })
			iofuncfdinfo@int iofunc fdinfo(${1: resmgr context t * ctp},${2:iofunc ocb t * ocb},${3:iofunc attr t * attr},${4:struct fdinfo * info })
			iofuncfuncinit@void iofunc func init(${1:unsigned nconnect},${2:resmgr connect funcs t *connect},${3:unsigned nio},${4:resmgr io funcs t *io })
			iofunclink@int iofunc link(${1: resmgr context t* ctp},${2:io link t* msg},${3:iofunc attr t* attr},${4:iofunc attr t* dattr},${5:struct client info* info })
			iofunclock@int iofunc lock(${1: resmgr context t * ctp},${2:io lock t * msg},${3:iofunc ocb t * ocb},${4:iofunc attr t * attr })
			locklisttiofunclockcalloc@on id=
			iofunclockdefault@int iofunc lock default(${1: resmgr context t * ctp},${2:io lock t * msg},${3:iofunc ocb t * ocb })
			iofunclockfree@void iofunc lock free(${1: iofunc lock list t* lock},${2:size t size })
			iofunclockocbdefault@int iofunc lock ocb default(${1: resmgr context t *ctp},${2:void *reserved},${3:iofunc ocb t *ocb })
			iofunclseek@int iofunc lseek (${1: resmgr context t* ctp},${2:io lseek t* msg},${3:iofunc ocb t* ocb},${4:iofunc attr t* attr })
			iofunclseekdefault@int iofunc lseek default(${1: resmgr context t* ctp},${2:io lseek t* msg},${3:iofunc ocb t* ocb })
			iofuncmknod@int iofunc mknod(${1: resmgr context t *ctp},${2:io mknod t *msg},${3:iofunc attr t *attr},${4:iofunc attr t *dattr},${5:struct client info *info })
			iofuncmmap@int iofunc mmap (${1: resmgr context t * hdr},${2:io mmap t * msg},${3:iofunc ocb t * ocb},${4:iofunc attr t * attr })
			iofuncmmapdefault@int iofunc mmap default (${1: resmgr context t * hdr},${2:io mmap t * msg},${3:iofunc ocb t * ocb })
			iofuncnotify@int iofunc notify(${1: resmgr context t *ctp},${2:io notify t *msg},${3:iofunc notify t *nop},${4:int trig},${5:const int *notifycounts},${6:int *armed })
			iofuncnotifyremove@void iofunc notify remove(${1: resmgr context t * ctp},${2:iofunc notify t * nop })
			iofuncnotifytrigger@void iofunc notify trigger(${1: iofunc notify t *nop},${2:int count},${3:int index })
			iofuncocbattach@int iofunc ocb attach(${1:resmgr context t * ctp},${2:io open t * msg},${3:iofunc ocb t * ocb},${4:iofunc attr t * attr},${5:const resmgr io funcs t * io funcs })
			ocbtiofuncocbcalloc@iofunc ocb t * iofunc ocb calloc(${1:resmgr context t * ctp},${2:iofunc attr t * attr })
			iofuncocbdetach@int iofunc ocb detach(${1: resmgr context t * ctp},${2:iofunc ocb t * ocb })
			iofuncocbfree@void iofunc ocb free(${1: iofunc ocb t * ocb })
			structiofuncocb@typedef struct iofunc ocb {IOFUNC ATTR T *attr
			@int32 t ioflag
			!defined@#if !defined(${1: IOFUNC OFFSET BITS}) || IOFUNC OFFSET BITS == 64#if FILE OFFSET BITS - 0 == 64off t offset
			@#elseoff64 t offset
			IOFUNCOFFSETBITS-0==32@on id=
			@off t offset hi
			defined@#elif defined(${1: BIGENDIAN })off t offset hi
			@off t offset
			endiannotconfiguredforsystem@on id=
			@int32 t offset hi
			defined@#elif defined(${1: BIGENDIAN })int32 t offset hi
			@int32 t offset
			@#else#error endian not configured for system#endif#endif#else#error IOFUNC OFFSET BITS value is unsupported#endifuint16 t sflag
			@uint16 t flags
			@void *reserved
			@} iofunc ocb t
			iofuncopen@int iofunc open(${1: resmgr context t *ctp},${2:io open t *msg},${3:iofunc attr t *attr},${4:iofunc attr t *dattr},${5:struct client info *info })
			iofuncopendefault@int iofunc open default(${1: resmgr context t *ctp},${2:io open t *msg},${3:iofunc attr t *attr},${4:void *extra })
			iofuncopenfd@int iofunc openfd(${1: resmgr context t *ctp},${2:io openfd t *msg},${3:iofunc ocb t *ocb},${4:iofunc attr t *attr })
			iofuncopenfddefault@int iofunc openfd default(${1: resmgr context t *ctp},${2:io openfd t *msg},${3:iofunc ocb t *ocb })
			iofuncpathconf@int iofunc pathconf(${1: resmgr context t *ctp},${2:io pathconf t *msg},${3:iofunc ocb t *ocb},${4:iofunc attr t *attr })
			iofuncpathconfdefault@int iofunc pathconf default(${1: resmgr context t *ctp},${2:io pathconf t *msg},${3:iofunc ocb t *ocb })
			iofuncreaddefault@int iofunc read default(${1: resmgr context t *ctp},${2:io read t *msg},${3:iofunc ocb t *ocb })
			iofuncreadverify@int iofunc read verify(${1: resmgr context t* ctp},${2:io read t* msg},${3:iofunc ocb t* ocb},${4:int* nonblock })
			iofuncreadlink@int iofunc readlink(${1: resmgr context t *ctp},${2:io readlink t *msg},${3:iofunc attr t *attr},${4:struct client info *info })
			iofuncrename@int iofunc rename(${1: resmgr context t* ctp},${2:io rename t* msg},${3:iofunc attr t* oldattr},${4:iofunc attr t* olddattr},${5:iofunc attr t* newattr},${6:iofunc attr t* newdattr},${7:struct client info* info })
			iofuncspaceverify@int iofunc space verify(${1: resmgr context t *ctp},${2:io space t *msg},${3:iofunc ocb t *ocb},${4:int *nonblock })
			iofuncstat@int iofunc stat(${1: resmgr context t* ctp},${2:iofunc attr t* attr},${3:struct stat* stat })
			iofuncstatdefault@int iofunc stat default(${1: resmgr context t *ctp},${2:io stat t *msg},${3:iofunc ocb t *ocb })
			iofuncsync@int iofunc sync(${1: resmgr context t* ctp},${2:iofunc ocb t* ocb},${3:int ioflag })
			iofuncsyncdefault@int iofunc sync default(${1: resmgr context t *ctp},${2:io sync t *msg},${3:iofunc ocb t *ocb })
			iofuncsyncverify@int iofunc sync verify(${1: resmgr context t *ctp},${2:io sync t *msg},${3:iofunc ocb t *ocb })
			iofunctimeupdate@int iofunc time update(${1: iofunc attr t* attr })
			iofuncunblock@int iofunc unblock(${1: resmgr context t * ctp},${2:iofunc attr t * attr })
			iofuncunblockdefault@int iofunc unblock default(${1: resmgr context t * ctp},${2:io pulse t * msg},${3:iofunc ocb t * ocb })
			iofuncunlink@int iofunc unlink(${1: resmgr context t* ctp},${2:io unlink t* msg},${3:iofunc attr t* attr},${4:iofunc attr t* dattr},${5:struct client info* info })
			iofuncunlockocbdefault@int iofunc unlock ocb default(${1:resmgr context t * ctp},${2:void * reserved},${3:iofunc ocb t * ocb })
			iofuncutime@int iofunc utime(${1: resmgr context t* ctp},${2:io utime t* msg},${3:iofunc ocb t* ocb},${4:iofunc attr t* attr })
			iofuncutimedefault@int iofunc utime default(${1: resmgr context t* ctp},${2:io utime t* msg},${3:iofunc ocb t* ocb })
			iofuncwritedefault@int iofunc write default(${1: resmgr context t* ctp},${2:io write t* msg},${3:iofunc ocb t* ocb })
			iofuncwriteverify@int iofunc write verify(${1: resmgr context t* ctp},${2:io write t* msg},${3:iofunc ocb t* ocb},${4:int* nonblock })
			ionotify@int ionotify (${1: int fd},${2:int action},${3:int flags},${4:const struct sigevent* event })
			socket@int socket(${1: PF KEY },${2:SOCK RAW },${3:PF KEY V2 })
			ipsecdumppolicy@char* ipsec dump policy(${1:char *buf},${2:char *delim})
			ipsecgetpolicylen@int ipsec get policylen(${1:char *buf})
			char@on id=
			ipsecsetpolicy@char* ipsec set policy(${1:char *policy},${2:int len})
			isalnum@int isalnum(${1: int c })
			isalpha@int isalpha(${1: int c })
			isascii@int isascii(${1: int c })
			iscntrl@int iscntrl(${1: int c })
			isdigit@int isdigit(${1: int c })
			isgraph@int isgraph(${1: int c })
			islower@int islower(${1: int c })
			isprint@int isprint(${1: int c })
			ispunct@int ispunct(${1: int c })
			isspace@int isspace(${1: int c })
			isupper@int isupper(${1: int c })
			isxdigit@int isxdigit(${1: int c })
			tolower@int tolower(${1: int c })
			toupper@int toupper(${1: int c })
			iswalnum@int iswalnum(${1: wint t wc })
			iswalpha@int iswalpha(${1: wint t wc })
			iswcntrl@int iswcntrl(${1: wint t wc })
			iswctype@int iswctype(${1: wint t wc},${2:wctype t charclass })
			iswdigit@int iswdigit(${1: wint t wc })
			iswgraph@int iswgraph(${1: wint t wc })
			iswlower@int iswlower(${1: wint t wc })
			iswprint@int iswprint(${1: wint t wc })
			iswpunct@int iswpunct(${1: wint t wc })
			iswspace@int iswspace(${1: wint t wc })
			iswupper@int iswupper(${1: wint t wc })
			iswxdigit@int iswxdigit(${1: wint t wc })
			ttowctrans@wint t towctrans(${1: wint t wc},${2:wctrans t category })
			ttowlower@wint t towlower(${1: wint t wc })
			ttowupper@wint t towupper(${1: wint t wc })
			twctrans@wctrans t wctrans(${1:const char *property})
			twctype@wctype t wctype(${1: const char * property })
			kill@int kill(${1: pid t pid},${2:int sig })
			killpg@int killpg(${1: pid t pgrp},${2:int sig })
			pthreadkill@int pthread kill(${1: pthread t thread},${2:int sig })
			pthreadsigmask@int pthread sigmask(${1: int how},${2:const sigset t* set},${3:sigset t* oset })
			raise@int raise(${1: int condition })
			sigaction@int sigaction(${1: int sig},${2:const struct sigaction * act},${3:struct sigaction * oact })
			sigaddset@int sigaddset(${1: sigset t *set},${2:int signo })
			sigdelset@int sigdelset(${1: sigset t *set},${2:int signo })
			sigemptyset@int sigemptyset(${1: sigset t *set })
			sigfillset@int sigfillset(${1: sigset t *set })
			sigismember@int sigismember(${1: const sigset t *set},${2:int signo })
			@void (${1: * signal(${2: int sig},${3:void (${4: * func})(${5:int}) }) })(${6: int })
			sigpause@int sigpause(${1: int sig })
			sigpending@int sigpending(${1: sigset t *set })
			sigprocmask@int sigprocmask(${1: int how},${2:const sigset t *set},${3:sigset t *oset })
			sigqueue@int sigqueue (${1: pid t pid},${2:int signo},${3:const union sigval value })
			sigsuspend@int sigsuspend(${1: const sigset t *sigmask })
			sigtimedwait@int sigtimedwait(${1: const sigset t *set},${2:siginfo t *info},${3:const struct timespec *timeout })
			sigwait@int sigwait(${1: const sigset t *set},${2:int *sig })
			sigwaitinfo@int sigwaitinfo (${1: const sigset t *set},${2:siginfo t *info })
			lconvlocaleconv@struct lconv * localeconv(${1: void })
			setlocale@char * setlocale(${1: int category},${2:const char * locale })
			longjmp@void longjmp(${1: jmp buf env},${2:int return value })
			setjmp@int setjmp(${1: jmp buf env })
			siglongjmp@void siglongjmp(${1: sigjmp buf env},${2:int val })
			sigsetjmp@int sigsetjmp(${1: sigjmp buf env},${2:int savemask })
			memoffset@int mem offset(${1: const void * addr},${2:int fd},${3:size t length},${4:off t * offset},${5:size t * contig len })
			memoffset64@int mem offset64(${1: const void * addr},${2:int fd},${3:size t length},${4:off64 t * offset},${5:size t * contig len })
			mlock@int mlock(${1: const void * addr},${2:size t len })
			mlockall@int mlockall(${1: int flags })
			mmap@void * mmap(${1: void * addr},${2:size t len},${3:int prot},${4:int flags},${5:int fildes},${6:off t off })
			mmap64@void * mmap64(${1: void * addr},${2:size t len},${3:int prot},${4:int flags},${5:int fildes},${6:off64 t off })
			tmmapdeviceio@uintptr t mmap device io(${1: size t len},${2:uint64 t io })
			mmapdevicememory@void * mmap device memory(${1: void * addr},${2:size t len},${3:int prot},${4:int flags},${5:uint64 t physical })
			mprotect@int mprotect(${1: const void * addr},${2:size t len},${3:int prot })
			msync@int msync(${1: void * addr},${2:size t len},${3:int flags })
			munlock@int munlock(${1: const void * addr},${2:size t len })
			munlockall@int munlockall(${1: void })
			munmap@int munmap(${1: void * addr},${2:size t len })
			munmapdeviceio@int munmap device io(${1: uintptr t io},${2:size t len })
			munmapdevicememory@int munmap device memory(${1: void * addr},${2:size t len })
			posixmemoffset@int posix mem offset(${1: const void * addr},${2:size t length},${3:off t * offset},${4:size t * contig len},${5:int * fd })
			posixmemoffset64@int posix mem offset64(${1: const void * addr},${2:size t length},${3:off64 t * offset},${4:size t * contig len},${5:int * fd })
			shmctl@int shm ctl(${1: int fd},${2:int flags},${3:uint64 paddr},${4:uint64 size })
			shmctlspecial@int shm ctl special(${1: int fd},${2:int flags},${3:uint64 paddr},${4:uint64 size},${5:unsigned special })
			shmopen@int shm open(${1: const char * name},${2:int oflag},${3:mode t mode })
			shmunlink@int shm unlink(${1: const char * name })
			memccpy@void* memccpy(${1: void* dest},${2:const void* src},${3:int c},${4:size t cnt })
			memchr@void* memchr(${1:void* buf},${2:int ch},${3:size t length })
			memcmp@int memcmp(${1: const void* s1},${2:const void* s2},${3:size t length })
			memcpy@void* memcpy(${1: void* dst},${2:const void* src},${3:size t length })
			tmemcpyv@size t memcpyv(${1: const struct iovec *dst},${2:int dparts},${3:int doff},${4:const struct iovec *src},${5:int sparts},${6:int soff })
			memicmp@int memicmp(${1: const void* s1},${2:const void* s2},${3:size t length })
			memmove@void* memmove(${1: void* dst},${2:const void* src},${3:size t length })
			memset@void* memset(${1: void* dst},${2:int c},${3:size t length })
			straddstr@int straddstr(${1: const char * str},${2:int len},${3:char ** pbuf},${4:size t * pmaxbuf })
			strcat@char* strcat(${1: char* dst},${2:const char* src })
			strchr@char* strchr(${1:char* s},${2:int c })
			strcmp@int strcmp(${1: const char* s1},${2:const char* s2 })
			strcmpi@int strcmpi(${1: const char* s1},${2:const char* s2 })
			strcoll@int strcoll(${1: const char* s1},${2:const char* s2 })
			strcpy@char* strcpy(${1: char* dst},${2:const char* src })
			tstrcspn@size t strcspn(${1: const char* str},${2:const char* charset })
			strdup@char* strdup(${1: const char* src })
			strerror@char* strerror(${1: int errnum })
			stricmp@int stricmp(${1: const char* s1},${2:const char* s2 })
			tstrlen@size t strlen(${1: const char * s })
			strlwr@char* strlwr(${1: char* s1 })
			strncat@char* strncat(${1: char* dst},${2:const char* src},${3:size t n })
			strncmp@int strncmp(${1: const char* s1},${2:const char* s2},${3:size t n })
			strncpy@char* strncpy(${1: char* dst},${2:const char* src},${3:size t n })
			strnicmp@int strnicmp(${1: const char* s1},${2:const char* s2},${3:size t len })
			strnset@char * strnset(${1: char * s1},${2:int fill},${3:size t len })
			strpbrk@char* strpbrk(${1:char* str},${2:char* charset })
			charstrrchr@const char* strrchr(${1:const char* s},${2:int c })
			strrev@char* strrev(${1: char* s1 })
			strsep@char *strsep(${1: char **stringp},${2:char *delim })
			strset@char* strset(${1: char* s1},${2:int fill })
			strsignal@char *strsignal(${1: int signo })
			tstrspn@size t strspn(${1: const char* str},${2:const char* charset })
			strstr@char* strstr(${1:char* str},${2:char* substr })
			strtok@char* strtok(${1: char* s1},${2:const char* s2 })
			strtokr@char* strtok r(${1: char* s},${2:const char* sep},${3:char** lasts })
			strupr@char* strupr(${1: char* s1 })
			tstrxfrm@size t strxfrm(${1: char* dst},${2:const char* src},${3:size t n })
			modemopen@int modem open(${1: char* device},${2:speed t baud })
			modemread@int modem read(${1: int fd},${2:char* buf},${3:int bufsize},${4:int quiet},${5:int timeout},${6:int flags},${7:int (${8:*cancel})(${9:void}) })
			modemscript@int modem script(${1: int fd},${2:struct modem script* table},${3:speed t* baud},${4:void (${5:*io})(${6:char* progress},${7:char* in},${8:char* out })},${9:int (${10:*cancel})(${11:void}) })
			modemwrite@int modem write(${1: int fd},${2:char* str })
			mount@int mount(${1: const char* spec},${2:const char* dir},${3:int flags},${4:const char* type},${5:const void* data},${6:int datalen })
			mountparsegenericargs@char * mount parse generic args(${1: char * options},${2:int * flags })
			umount@int umount(${1: const char* dir},${2:int flags})
			mqclose@int mq close(${1: mqd t mqdes })
			mqgetattr@int mq getattr(${1: mqd t mqdes},${2:struct mq attr* mqstat })
			mqnotify@int mq notify(${1:mqd t mqdes},${2:const struct sigevent* notification })
			tmqreceive@ssize t mq receive(${1: mqd t mqdes},${2:char* msg ptr},${3:size t msg len},${4:unsigned int* msg prio })
			mqsend@int mq send(${1: mqd t mqdes},${2:const char * msg ptr},${3:size t msg len},${4:unsigned int msg prio })
			mqsetattr@int mq setattr(${1: mqd t mqdes},${2:const struct mq attr* mqstat},${3:struct mq attr* omqstat })
			mqunlink@int mq unlink(${1: const char* name })
			napms@int napms(${1: int ms})
			netmgrndtostr@int netmgr ndtostr(${1: unsigned flags},${2:int nd},${3:char * buf},${4:size t maxbuf })
			netmgrremotend@int netmgr remote nd(${1: int remote nd},${2:int local nd })
			netmgrstrtond@int netmgr strtond(${1: const char * nodename},${2:char ** endstr })
			pathmgrsymlink@int pathmgr symlink(${1: const char * symlink},${2:const char * path })
			pathmgrunlink@int pathmgr unlink(${1: const char * path })
			pccardarm@int pccard arm(${1: pccard t handle},${2:int devtype},${3:unsigned event},${4:int coid })
			tpccardattach@pccard t pccard attach(${1: int reserved })
			pccarddetach@int pccard detach(${1: pccard t handle })
			pccardinfo@int pccard info(${1: pccard t handle},${2:int socket},${3:struct pccard info* info},${4:unsigned size })
			pccardlock@int pccard lock(${1: pccard t handle},${2:int socket},${3:int index},${4:int oflag })
			tpccardrawread@ssize t pccard raw read(${1: pccard t handle},${2:int socket},${3:int type},${4:unsigned addr},${5:ssize t len},${6:void* buf })
			pccardunlock@int pccard unlock(${1: pccard t handle},${2:int socket},${3:int index })
			pciattach@int pci attach(${1: unsigned flags })
			pciattachdevice@void* pci attach device(${1:void* handle},${2:uint32 t flags},${3:uint16 t idx},${4:struct pci dev info* info })
			pcidetach@int pci detach(${1: unsigned handle })
			pcidetachdevice@int pci detach device(${1: void* handle })
			pcifindclass@int pci find class(${1: unsigned long class code},${2:unsigned index},${3:unsigned* bus},${4:unsigned* dev func })
			pcifinddevice@int pci find device(${1: unsigned device},${2:unsigned vendor},${3:unsigned index},${4:unsigned* bus},${5:unsigned* dev func })
			pciirqroutingoptions@int pci irq routing options(${1:IRQRoutingOptionsBuffer * buf},${2:uint32 t * irq })
			pcimapirq@int pci map irq(${1: unsigned bus},${2:unsigned dev func},${3:short intno},${4:short intpin })
			pcipresent@int pci present(${1: unsigned* lastbus},${2:unsigned* version},${3:unsigned* hardware })
			pcireadconfig@int pci read config(${1: void* handle},${2:unsigned offset},${3:unsigned count},${4:size t size},${5:void* buff })
			pcireadconfig8@int pci read config8(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			pcireadconfig16@int pci read config16(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			pcireadconfig32@int pci read config32(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			pcirescanbus@int pci rescan bus(${1: void })
			pciwriteconfig@int pci write config(${1: void* handle},${2:unsigned offset},${3:unsigned count},${4:size t size},${5:const void* buff })
			pciwriteconfig8@int pci write config8(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			pciwriteconfig16@int pci write config16(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			pciwriteconfig32@int pci write config32(${1: unsigned bus},${2:unsigned dev func},${3:unsigned offset},${4:unsigned count},${5:char* buff })
			poll@int poll(${1: struct pollfd fds*},${2:nfds t nfds},${3:int timeout })
			procmgrdaemon@int procmgr daemon(${1: int status},${2:unsigned flags })
			procmgreventnotify@on id=
			procmgreventtrigger@int procmgr event trigger(${1: unsigned flags })
			tprocmgrguardian@pid t procmgr guardian(${1: pid t pid })
			procmgrsession@int procmgr session(${1: uint32 t nd},${2:pid t sid},${3:int id},${4:unsigned event})
			pthreadabort@int pthread abort(${1: pthread t thread })
			pthreadattrdestroy@int pthread attr destroy(${1: pthread attr t * attr })
			pthreadattrgetdetachstate@int pthread attr getdetachstate(${1:const pthread attr t* attr},${2:int* detachstate })
			pthreadattrgetguardsize@int pthread attr getguardsize(${1:const pthread attr t* attr},${2:size t* guardsize })
			pthreadattrgetinheritsched@int pthread attr getinheritsched(${1:const pthread attr t* attr},${2:int* inheritsched })
			pthreadattrgetscope@int pthread attr getscope(${1:const pthread attr t *attr},${2:int *scope })
			pthreadattrgetstackaddr@int pthread attr getstackaddr(${1:const pthread attr t* attr},${2:void** stackaddr })
			pthreadattrgetstacklazy@int pthread attr getstacklazy(${1:const pthread attr t * attr},${2:int *lazystack })
			pthreadattrgetstacksize@int pthread attr getstacksize(${1:const pthread attr t* attr},${2:size t* stacksize })
			pthreadattrinit@int pthread attr init(${1: pthread attr t *attr })
			pthreadattrsetdetachstate@int pthread attr setdetachstate(${1:pthread attr t* attr},${2:int detachstate })
			pthreadattrsetguardsize@int pthread attr setguardsize(${1:pthread attr t* attr},${2:size t guardsize })
			pthreadattrsetinheritsched@int pthread attr setinheritsched(${1:pthread attr t * attr},${2:int inheritsched })
			pthreadattrsetscope@int pthread attr setscope(${1: pthread attr t* attr},${2:int scope })
			pthreadattrsetstackaddr@int pthread attr setstackaddr(${1: pthread attr t * attr},${2:void * stackaddr })
			pthreadattrsetstacklazy@int pthread attr setstacklazy(${1:pthread attr t * attr},${2:int lazystack })
			pthreadattrsetstacksize@int pthread attr setstacksize(${1: pthread attr t * attr},${2:size t stacksize })
			pthreadbarrierdestroy@int pthread barrier destroy(${1:pthread barrier t * barrier })
			pthreadbarrierinit@int pthread barrier init(${1:pthread barrier t * barrier},${2:const pthread barrierattr t * attrunsigned int count })
			pthreadbarrierattrdestroy@int pthread barrierattr destroy(${1:pthread barrierattr t * attr })
			pthreadbarrierattrgetpshared@int pthread barrierattr getpshared(${1:const pthread barrierattr t * attrint * pshared })
			pthreadbarrierattrinit@int pthread barrierattr init(${1:pthread barrierattr t * attr })
			pthreadcancel@int pthread cancel(${1: pthread t thread })
			pthreadcleanuppop@void pthread cleanup pop(${1: int execute })
			pthreadcleanuppush@void pthread cleanup push(${1: void (${2:routine})(${3:void*})},${4:void* arg })
			pthreadcondbroadcast@int pthread cond broadcast(${1: pthread cond t* cond })
			pthreadconddestroy@int pthread cond destroy(${1: pthread cond t* cond })
			@pthread cond t cond = PTHREAD COND INITIALIZER
			pthreadcondinit@int pthread cond init(${1: pthread cond t* cond},${2:pthread condattr t* attr })
			pthreadcondsignal@int pthread cond signal(${1: pthread cond t* cond })
			pthreadcondwait@int pthread cond wait(${1: pthread cond t* cond},${2:pthread mutex t* mutex })
			pthreadcondattrdestroy@int pthread condattr destroy(${1:pthread condattr t* attr })
			pthreadcondattrgetclock@int pthread condattr getclock(${1:const pthread condattr t * attr},${2:clockid t * id })
			pthreadcondattrgetpshared@int pthread condattr getpshared(${1:const pthread condattr t* attr},${2:int* pshared })
			pthreadcondattrinit@int pthread condattr init(${1: pthread condattr t* attr })
			pthreadcondattrsetclock@int pthread condattr setclock(${1:pthread condattr t * attr},${2:clockid t id })
			pthreadcondattrsetpshared@int pthread condattr setpshared(${1:pthread condattr t* attr},${2:int pshared })
			pthreadcreate@int pthread create(${1: pthread t* thread},${2:const pthread attr t* attr},${3:void* (${4:*start routine})(${5:void* })},${6:void* arg })
			pthreaddetach@int pthread detach(${1: pthread t thread })
			pthreadequal@int pthread equal(${1: pthread t t1},${2:pthread t t2 })
			pthreadexit@void pthread exit(${1: void* value ptr })
			pthreadgetconcurrency@int pthread getconcurrency(${1: void })
			intpthreadgetcpuclockid@extern int pthread getcpuclockid(${1:pthread t id},${2:clockid t* clock id})
			pthreadgetschedparam@int pthread getschedparam(${1:const pthread t thread},${2:int *policy},${3:struct sched param *param })
			pthreadgetspecific@void* pthread getspecific(${1: pthread key t key })
			pthreadjoin@int pthread join(${1: pthread t thread},${2:void** value ptr })
			pthreadkeycreate@int pthread key create(${1: pthread key t * key},${2:void (${3:*destructor})(${4: void * }) })
			pthreadkeydelete@int pthread key delete(${1: pthread key t key })
			pthreadmutexdestroy@int pthread mutex destroy(${1: pthread mutex t* mutex })
			pthreadmutexgetprioceiling@int pthread mutex getprioceiling(${1:const pthread mutex t* mutex},${2:int* prioceiling })
			@pthread mutex t mutex = PTHREAD MUTEX INITIALIZER
			pthreadmutexinit@int pthread mutex init(${1:pthread mutex t* mutex},${2:const pthread mutexattr t* attr })
			pthreadmutexlock@int pthread mutex lock(${1: pthread mutex t* mutex })
			pthreadmutexsetprioceiling@int pthread mutex setprioceiling(${1:pthread mutex t* mutex},${2:int prioceiling},${3:int* old ceiling })
			pthreadmutextrylock@int pthread mutex trylock(${1: pthread mutex t* mutex })
			pthreadmutexunlock@int pthread mutex unlock(${1: pthread mutex t* mutex })
			pthreadmutexattrdestroy@int pthread mutexattr destroy(${1:pthread mutexattr t* attr })
			pthreadmutexattrgetprioceiling@int pthread mutexattr getprioceiling(${1:const pthread mutexattr t* attr},${2:int* prioceiling })
			pthreadmutexattrgetprotocol@int pthread mutexattr getprotocol(${1:pthread mutexattr * attr},${2:int * protocol })
			pthreadmutexattrgetpshared@int pthread mutexattr getpshared(${1:const pthread mutexattr t* attr},${2:int* pshared })
			pthreadmutexattrgetrecursive@int pthread mutexattr getrecursive(${1:const pthread mutexattr t* attr},${2:int* recursive })
			pthreadmutexattrgettype@int pthread mutexattr gettype(${1:const pthread mutexattr t * attr},${2:int * type })
			pthreadmutexattrinit@int pthread mutexattr init(${1:const pthread mutexattr t* attr })
			pthreadmutexattrsetprioceiling@int pthread mutexattr setprioceiling(${1:pthread mutexattr t* attr},${2:int prioceiling })
			pthreadmutexattrsetprotocol@int pthread mutexattr setprotocol(${1:pthread mutexattr * attr},${2:int protocol })
			pthreadmutexattrsetpshared@int pthread mutexattr setpshared(${1:pthread mutexattr t* attr},${2:int pshared })
			pthreadmutexattrsetrecursive@int pthread mutexattr setrecursive(${1:pthread mutexattr t* attr},${2:int recursive })
			pthreadmutexattrsettype@int pthread mutexattr settype(${1:pthread mutexattr t * attr},${2:int type })
			@pthread once t once control = PTHREAD ONCE INIT
			pthreadonce@int pthread once(${1: pthread once t* once control},${2:void (${3:*init routine})(${4:void}) })
			pthreadrwlockdestroy@int pthread rwlock destroy(${1: pthread rwlock t* rwl })
			pthreadrwlockinit@int pthread rwlock init(${1:pthread rwlock t * rwl},${2:const pthread rwlockattr t * attr })
			pthreadrwlockrdlock@int pthread rwlock rdlock(${1: pthread rwlock t* rwl })
			pthreadrwlocktryrdlock@int pthread rwlock tryrdlock(${1:pthread rwlock t* rwl })
			pthreadrwlocktrywrlock@int pthread rwlock trywrlock(${1:pthread rwlock t* rwl })
			pthreadrwlockunlock@int pthread rwlock unlock(${1: pthread rwlock t* rwl })
			pthreadrwlockwrlock@int pthread rwlock wrlock(${1:pthread rwlock t* rwl })
			pthreadrwlockattrdestroy@int pthread rwlockattr destroy(${1:pthread rwlockattr t* attr })
			pthreadrwlockattrgetpshared@int pthread rwlockattr getpshared(${1:const pthread rwlockattr t* attr},${2:int* pshared })
			pthreadrwlockattrinit@int pthread rwlockattr init(${1:pthread rwlockattr t* attr })
			pthreadrwlockattrsetpshared@int pthread rwlockattr setpshared(${1:pthread rwlockattr t* attr},${2:int pshared })
			tpthreadself@pthread t pthread self(${1: void })
			pthreadsetcancelstate@int pthread setcancelstate(${1: int state},${2:int* oldstate })
			pthreadsetcanceltype@int pthread setcanceltype(${1: int type},${2:int* oldtype })
			pthreadsetconcurrency@int pthread setconcurrency(${1: int new level })
			pthreadsetschedparam@int pthread setschedparam(${1:pthread t thread},${2:int policy},${3:const struct sched param *param })
			pthreadsetspecific@int pthread setspecific(${1: pthread key t key},${2:const void* value })
			pthreadsleeponbroadcast@int pthread sleepon broadcast(${1:const volatile void * addr })
			pthreadsleeponlock@int pthread sleepon lock(${1: void })
			pthreadsleeponsignal@int pthread sleepon signal(${1:const volatile void * addr })
			pthreadsleepontimedwait@int pthread sleepon timedwait(${1:const volatile void * addr},${2:uint64 t nsec })
			pthreadsleeponunlock@int pthread sleepon unlock(${1: void })
			pthreadsleeponwait@int pthread sleepon wait(${1: const volatile void * addr })
			pthreadspindestroy@int pthread spin destroy(${1:pthread spinlock t * spinner })
			pthreadspininit@int pthread spin init(${1: pthread spinlock t * spinner},${2:int pshared })
			pthreadspinlock@int pthread spin lock(${1: pthread spinlock t * spinner })
			pthreadspintrylock@int pthread spin trylock(${1:pthread spinlock t * spinner })
			pthreadspinunlock@int pthread spin unlock(${1: spinlock t * spinner })
			pthreadtestcancel@void pthread testcancel(${1: void })
			pthreadtimedjoin@int pthread timedjoin(${1:pthread t thread},${2:void** value ptr},${3:const struct timespec* abstime })
			sleeponbroadcast@int sleepon broadcast(${1: sleepon t * l},${2:const volatile void * addr })
			sleepondestroy@int sleepon destroy(${1: sleepon t * l })
			sleeponinit@int sleepon init(${1: sleepon t ** pl},${2:unsigned flags})
			sleeponlock@int sleepon lock(${1: sleepon t * l })
			sleeponsignal@int sleepon signal(${1: sleepon t * l},${2:const volatile void * addr })
			sleeponunlock@int sleepon unlock(${1: sleepon t * l })
			sleeponwait@int sleepon wait(${1: sleepon t * l},${2:const volatile void * addr},${3:uint64 nsec})
			pthreadbarrierwait@int pthread barrier wait(${1: pthread barrier t * barrier })
			pthreadbarrierattrsetpshared@int pthread barrierattr setpshared(${1:pthread barrierattr t * attrint pshared })
			readmainconfigfile@int read main config file(${1:struct snmpd conf data * info })
			intsnmperrno@on id=
			snmpfreepdu@void snmp free pdu(${1: struct snmp pdu * pdu })
			@extern int snmp errno
			snmpsessionsnmpopen@struct snmp session * snmp open(${1:struct snmp session * session })
			snmppdu@struct snmp pdu {int version
			@ipaddr address
			@oid * srcParty
			@int srcPartyLen
			@oid * dstParty
			@int dstPartyLen
			@oid * context
			@int contextLen
			@u char * community
			@int community len
			@int command
			@long reqid
			@long errstat
			@long errindex
			@/* Trap information */oid * enterprise
			@int enterprise length
			@ipaddr agent addr
			@int trap type
			@int specific type
			@u long time
			@struct variable list * variables
			@}
			snmpselectinfo@int snmp select info(${1: int * numfds},${2:struct fd set * fdset},${3:struct timeval * timeout},${4:int * block })
			intsnmperrno@on id=
			snmpsession@struct snmp session {u char * community
			@int community len
			@int retries
			@long timeout
			@char * peername
			@u short remote port
			@u short local port
			char@u char * (${1: *authenticator })(${2:})
			@int (${1: * callback })(${2:})
			@void * callback magic
			@int version
			@oid * srcParty
			@int srcPartyLen
			@oid * dstParty
			@int dstPartyLen
			@oid * context
			@int contextLen
			@}
			snmptimeout@void snmp timeout(${1: void })
			treadv@ssize t readv(${1: int fildes},${2:const iov t* iov},${3:int iovcnt })
			twritev@ssize t writev(${1: int fildes},${2:const iov t* iov},${3:int iovcnt })
			regcomp@int regcomp(${1: regex t * preg},${2:const char * pattern},${3:int cflags })
			tregerror@size t regerror(${1: int err},${2:const regex t * reg},${3:char * buf},${4:size t len })
			regexec@int regexec(${1: const regex t * preg},${2:const char * string},${3:size t nmatch},${4:regmatch t * pmatch},${5:int eflags })
			regfree@void regfree(${1: regex t * preg })
			structresmgrconnectfuncs@typedef struct resmgr connect funcs {unsigned nfuncs
			@int (${1:*open}) (${2:resmgr context t *ctp},${3: io open t *msg},${4:RESMGR HANDLE T *handle},${5: void *extra})
			@int (${1:*unlink}) (${2:resmgr context t *ctp},${3: io unlink t *msg},${4:RESMGR HANDLE T *handle},${5: void *reserved})
			@int (${1:*rename}) (${2:resmgr context t *ctp},${3: io rename t *msg},${4:RESMGR HANDLE T *handle},${5:io rename extra t *extra})
			@int (${1:*mknod}) (${2:resmgr context t *ctp},${3: io mknod t *msg},${4:RESMGR HANDLE T *handle},${5: void *reserved})
			@int (${1:*readlink}) (${2:resmgr context t *ctp},${3: io readlink t *msg},${4:RESMGR HANDLE T *handle},${5: void *reserved})
			@int (${1:*link}) (${2:resmgr context t *ctp},${3: io link t *msg},${4:RESMGR HANDLE T *handle},${5:io link extra t *extra})
			@int (${1:*unblock}) (${2:resmgr context t *ctp},${3: io pulse t *msg},${4:RESMGR HANDLE T *handle},${5: void *reserved})
			@int (${1:*mount}) (${2:resmgr context t *ctp},${3: io mount t *msg},${4:RESMGR HANDLE T *handle},${5:io mount extra t *extra})
			@} resmgr connect funcs t
			structresmgrcontext@typedef struct resmgr context {int rcvid
			@struct msg info info
			@resmgr iomsgs t *msg
			@dispatch t *dpp
			@int id
			@unsigned tid
			@unsigned msg max size
			@int status
			@int offset
			@int size
			@iov t iov[1]
			@} resmgr context t
			resmgrdevino@int resmgr devino(${1: int id},${2:dev t *pdevno},${3:ino64 t *pino })
			functresmgriofunc@resmgr func t * resmgr io func(${1:const resmgr io funcs t * funcs},${2:unsigned type})
			structresmgriofuncs@typedef struct resmgr io funcs {unsigned nfuncs
			@int (${1:*read}) (${2:resmgr context t *ctp},${3: io read t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*write}) (${2:resmgr context t *ctp},${3: io write t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*close ocb}) (${2:resmgr context t *ctp},${3: void *reserved},${4:RESMGR OCB T *ocb})
			@int (${1:*stat}) (${2:resmgr context t *ctp},${3: io stat t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*notify}) (${2:resmgr context t *ctp},${3: io notify t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*devctl}) (${2:resmgr context t *ctp},${3: io devctl t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*unblock}) (${2:resmgr context t *ctp},${3: io pulse t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*pathconf}) (${2:resmgr context t *ctp},${3: io pathconf t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*lseek}) (${2:resmgr context t *ctp},${3: io lseek t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*chmod}) (${2:resmgr context t *ctp},${3: io chmod t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*chown}) (${2:resmgr context t *ctp},${3: io chown t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*utime}) (${2:resmgr context t *ctp},${3: io utime t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*fdopen}) (${2:resmgr context t *ctp},${3: io fdopen t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*fdinfo}) (${2:resmgr context t *ctp},${3: io fdinfo t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*lock}) (${2:resmgr context t *ctp},${3: io lock t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*space}) (${2:resmgr context t *ctp},${3: io space t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*shutdown}) (${2:resmgr context t *ctp},${3: io shutdown t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*mmap}) (${2:resmgr context t *ctp},${3: io mmap t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*msg}) (${2:resmgr context t *ctp},${3: io msg t *msg},${4:2474  P to R February 1},${5: 2005resmgr io funcs tRESMGR OCB T *ocb})
			@int (${1:*reserved}) (${2:resmgr context t *ctp},${3: void *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*dup}) (${2:resmgr context t *ctp},${3: io dup t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*close dup}) (${2:resmgr context t *ctp},${3: io close t *msg},${4:RESMGR OCB T *ocb})
			@int (${1:*lock ocb}) (${2:resmgr context t *ctp},${3: void *reserved},${4:RESMGR OCB T *ocb})
			@int (${1:*unlock ocb})(${2:resmgr context t *ctp},${3: void *reserved},${4:RESMGR OCB T *ocb})
			@int (${1:*sync}) (${2:resmgr context t *ctp},${3: io sync t *msg},${4:RESMGR OCB T *ocb})
			@} resmgr io funcs t
			resmgrmsgread@int resmgr msgread(${1: resmgr context t * ctp},${2:void * msg},${3:int size},${4:int offset })
			resmgrmsgreadv@int resmgr msgreadv(${1: resmgr context t * ctp},${2:iov t * rmsg},${3:int rparts},${4:int offset })
			resmgrmsgwrite@int resmgr msgwrite(${1: resmgr context t *ctp},${2:const void *msg},${3:int size},${4:int offset })
			resmgrmsgwritev@int resmgr msgwritev(${1: resmgr context t *ctp},${2:const iov t *smsg},${3:int sparts},${4:int offset })
			resmgrocb@void * resmgr ocb(${1: resmgr context t * ctp},${2:struct msg info * info})
			resmgropenbind@int resmgr open bind(${1:resmgr context t* ctp},${2:void* ocb},${3:const resmgr io funcs t* iofuncs })
			resmgrpathname@int resmgr pathname(${1: int id},${2:unsigned flags},${3:char* path},${4:int maxbuf })
			resmgrunbind@int resmgr unbind(${1: resmgr context t * ctp})
			resmgrhandlegrow@int resmgr handle grow (${1: unsigned min })
			resmgriofuncstresmgriofuncs@const resmgr io funcs t * resmgr iofuncs(${1:resmgr context t * ctp
			@struct msg info * info})
			socket@int socket(${1: PF ROUTE },${2:SOCK RAW },${3:int family })
			rsrcdbmgrattach@int rsrcdbmgr attach(${1: rsrc request t * list},${2:int count })
			rsrcdbmgrcreate@int rsrcdbmgr create(${1: rsrc alloc t *item},${2:int count })
			rsrcdbmgrdestroy@int rsrcdbmgr destroy(${1: rsrc alloc t *item},${2:int count })
			rsrcdbmgrdetach@int rsrcdbmgr detach(${1: rsrc request t *list},${2:int count })
			trsrcdbmgrdevnoattach@dev t rsrcdbmgr devno attach(${1: const char * name},${2:int minor request},${3:int flags })
			rsrcdbmgrdevnodetach@int rsrcdbmgr devno detach(${1: dev t devno},${2:int flags })
			rsrcdbmgrquery@int rsrcdbmgr query(${1: rsrc alloc t *list},${2:int listcnt},${3:int start},${4:uint32 t type })
			sctpbindx@int sctp bindx(${1:int sd},${2:struct sockaddr *addrs},${3:int addrcnt},${4:int flags})
			sctpconnectx@int sctp connectx(${1: int s},${2:struct sockaddr *addrs},${3:int addrcnt})
			sctpfreeladdrs@void sctp freeladdrs(${1:struct sockaddr *addrs})
			sctpfreepaddrs@void sctp freepaddrs(${1:struct sockaddr *addrs})
			sctpgetladdrs@int sctp getladdrs(${1:int sd},${2:sctp assoc t id},${3:struct sockaddr **addrs})
			sctpgetpaddrs@int sctp getpaddrs(${1:int sd},${2:sctp assoc t id},${3:struct sockaddr **addrs})
			sctppeeloff@int sctp peeloff(${1:int sd},${2:sctp assoc t assoc id})
			tsctprecvmsg@ssize t sctp recvmsg(${1:int s},${2:void *msg},${3:size t len},${4:struct sockaddr *from},${5:socklen t *fromlen},${6:struct sctp sndrcvinfo *sinfo},${7:int *msg flags})
			tsctpsendmsg@ssize t sctp sendmsg(${1:int s},${2:const void *msg},${3:size t len},${4:struct sockaddr *to},${5:socklen t tolen},${6:uint32 t ppid},${7:uint32 t flags},${8:uint16 t stream no},${9:uint32 t timetolive},${10:uint32 t context})
			select@int select(${1: int width},${2:fd set * readfds},${3:fd set * writefds},${4:fd set * exceptfds},${5:struct timeval * timeout })
			SET@FD SET(${1: int fd},${2: fd set * fdset })
			CLR@FD CLR(${1: int fd},${2: fd set * fdset })
			ISSET@FD ISSET(${1: int fd},${2: fd set * fdset })
			ZERO@FD ZERO(${1: fd set * fdset })
			SOCKSinit@int SOCKSinit(${1: char * progname })
			semclose@int sem close(${1: sem t * sem })
			semdestroy@int sem destroy(${1: sem t * sem })
			semgetvalue@int sem getvalue(${1: sem t * sem},${2:int * value })
			seminit@int sem init(${1: sem t * sem},${2:int pshared},${3:unsigned value })
			tsemopen@sem t * sem open(${1: const char * sem name},${2:int oflags},${3:... })
			sempost@int sem post(${1: sem t * sem })
			semtrywait@int sem trywait(${1: sem t * sem })
			semunlink@int sem unlink(${1: const char * sem name })
			semwait@int sem wait(${1: sem t * sem })
			sigval@union sigval {int sival int
			@void * sival ptr
			@}
			@The sigevent structure is complicated see below.
			slogb@int slogb(${1: int code},${2:int severity},${3:void * data},${4:int size })
			slogf@int slogf(${1: int opcode},${2:int severity},${3:const char * fmt},${4:... })
			slogi@int slogi(${1: int code},${2:int severity},${3:int nargs},${4:... })
			vslogf@int vslogf(${1: int opcode},${2:int severity},${3:const char * fmt},${4:va list arg })
			@extern int snmp errno
			snmppdusnmppducreate@struct snmp pdu * snmp pdu create (${1:int command })
			snmpread@void snmp read(${1: struct fd set * fdset })
			sopen@int sopen(${1: const char* filename},${2:int oflag},${3:int share},${4:... })
			tspawn@pid t spawn(${1: const char * path},${2:int fd count},${3:const int fd map[ ]},${4:const struct inheritance * inherit},${5:char * const argv[ ]},${6:char * const envp[ ] })
			tspawnp@pid t spawnp(${1: const char * file},${2:int fd count},${3:const int fd map[ ]},${4:const struct inheritance * inherit},${5:char * const argv[ ]},${6:char * const envp[ ] })
			spawnvpe@int spawnvpe(${1: int mode},${2:const char * file},${3:char * const argv[]},${4:char * const envp[] })
			sysconf@long sysconf(${1: int name })
			sysctl@int sysctl(${1: int * name},${2:u int namelen},${3:void * oldp},${4:size t * oldlenp},${5:void * newp},${6:size t newlen })
			sysmgrreboot@int sysmgr reboot(${1: void })
			ttimes@clock t times(${1: struct tms* buffer })
			uname@int uname(${1: struct utsname * name })
			@socket(${1: AF LOCAL },${2:SOCK STREAM },${3:0 })
			@socket(${1: AF LOCAL },${2:SOCK DGRAM },${3:0 })
			vaarg@type va arg(${1: va list param},${2:type })
			vacopy@void va copy(${1: va list d},${2:va list s })
			vaend@void va end(${1: va list param })
			vastart@void va start(${1: va list param},${2:previous })
			valloc@void * valloc(${1: size t size})
			vfprintf@int vfprintf(${1: FILE* fp},${2:const char* format},${3:va list arg })
			vfscanf@int vfscanf(${1: FILE *fp},${2:const char *format},${3:va list arg })
			vfwprintf@int vfwprintf(${1: FILE * fp},${2:const wchar t * format},${3:va list arg })
			vfwscanf@int vfwscanf(${1: FILE * fp},${2:const wchar t *format},${3:va list arg })
			vprintf@int vprintf(${1: const char* format},${2:va list arg })
			vscanf@int vscanf(${1: const char * format},${2:va list args })
			vsprintf@int vsprintf(${1: char* buf},${2:const char* format},${3:va list arg })
			vsscanf@int vsscanf(${1: const char* in string},${2:const char* format},${3:va list arg })
			vswprintf@int vswprintf(${1: wchar t * buf},${2:size t n},${3:const wchar t * format},${4:va list arg })
			vswscanf@int vswscanf(${1: const wchar t * ws},${2:const wchar t * format},${3:va list arg })
			vsyslog@void vsyslog(${1: int priority},${2:const char *message},${3:va list args })
			vwprintf@int vwprintf(${1: const wchar t * format},${2:va list arg })
			vwscanf@int vwscanf(${1: const wchar t * format},${2:va list arg })
			twait@pid t wait(${1: int * stat loc })
			twait3@pid t wait3(${1: int * stat locint options},${2:struct rusage * resource usage })
			twait4@pid t wait4(${1: pid t pid},${2:int * stat loc},${3:int options},${4:struct rusage * resource usage })
			waitid@int waitid(${1: idtype t idtype},${2:id t id},${3:siginfo t * infop},${4:int options })
			twaitpid@pid t waitpid(${1: pid t pid},${2:int * stat loc},${3:int options })
			wordexp@int wordexp(${1: const char * words},${2:wordexp t * pwordexp},${3:int flags })
			wordfree@void wordfree(${1: wordexp t * pwordexp })
			"""
			lineas=funciones.split("\n")
			completaciones=[]
			for l in lineas:
				partes=l.split("@")
				if partes[0].strip():
					completaciones.append((partes[0].strip(), partes[1].strip()))
			return completaciones
